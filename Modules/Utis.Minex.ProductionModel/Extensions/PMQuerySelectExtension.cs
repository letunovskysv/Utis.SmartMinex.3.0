

using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Utis.Minex.ProductionModel;
using Utis.Minex.ProductionModel.Common;
using Utis.Minex.ProductionModel.Devices;
using Utis.Minex.Common.Enum;
using Utis.Minex.Common;
using Utis.Minex.ProductionModel.Catalog.Organize;
using Utis.Minex.ProductionModel.UserRights;
using Utis.Minex.ProductionModel.Positioning;
using Utis.Minex.ProductionModel.Register.Value;
using Utis.Minex.ProductionModel.Register.Dimension;
using Utis.Minex.ProductionModel.CommandAndCalls;
using Utis.Minex.ProductionModel.Register.Value.State;
using Utis.Minex.ProductionModel.Register.Dimension.State;
using Utis.Minex.ProductionModel.Register.Value.Movement;
using Utis.Minex.ProductionModel.MineSpace.MineModel;
using Utis.Minex.ProductionModel.MineSpace;
using Utis.Minex.ProductionModel.Register.Dimension.Movement;
using Utis.Minex.ProductionModel.Register.Value.DeviceStatus;
using Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus;
using Utis.Minex.ProductionModel.Register.Value.Bind;
using Utis.Minex.ProductionModel.Register.Dimension.Bind;
using Utis.Minex.ProductionModel.Catalog;
using Utis.Minex.ProductionModel.PriorityEvent;
using Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent;
using Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane;
using Utis.Minex.ProductionModel.PriorityEvent.StateEvents;
using Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey;
using Utis.Minex.ProductionModel.Notes;
using Utis.Minex.ProductionModel.MobileDevice;
using Utis.Minex.ProductionModel.LoggingOfUserActions;
using Utis.Minex.ProductionModel.Journals;
using Utis.Minex.ProductionModel.JournalChanges;
using Utis.Minex.ProductionModel.Graphical;
using Utis.Minex.ProductionModel.Binds;


namespace Utis.Minex.ProductionModel.Extensions
{
    public static class PMQuerySelectExtension
    {
        

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Subscription> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Subscription> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DataProviderId = sel.DataProvider == null ? (long?)null : sel.DataProvider.Id
,                sel.DTOFullTypeName
,                sel.DBOFullTypeName
,                sel.Filter
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Subscription()
                {
                DataProvider = sel.DataProviderId == null? null : new Utis.Minex.ProductionModel.Common.DataProviderServer { Id = (long)sel.DataProviderId }
,                DTOFullTypeName = sel.DTOFullTypeName
,                DBOFullTypeName = sel.DBOFullTypeName
,                Filter = sel.Filter
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Subscription FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Subscription> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DataProviderId = sel.DataProvider == null ? (long?)null : sel.DataProvider.Id
,                sel.DTOFullTypeName
,                sel.DBOFullTypeName
,                sel.Filter
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Subscription()
                {
                DataProvider = select.DataProviderId == null? null : new Utis.Minex.ProductionModel.Common.DataProviderServer { Id = (long)select.DataProviderId }
,                DTOFullTypeName = select.DTOFullTypeName
,                DBOFullTypeName = select.DBOFullTypeName
,                Filter = select.Filter
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Subscription> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Subscription> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DataProviderId = sel.DataProvider == null ? (long?)null : sel.DataProvider.Id,
                DataProviderName = sel.DataProvider == null ? (string)null : sel.DataProvider.Name
,                sel.DTOFullTypeName
,                sel.DBOFullTypeName
,                sel.Filter
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Subscription()
                {
                DataProvider = sel.DataProviderId == null? null : new Utis.Minex.ProductionModel.Common.DataProviderServer { Id = (long)sel.DataProviderId, Name = (string)sel.DataProviderName }
,                DTOFullTypeName = sel.DTOFullTypeName
,                DBOFullTypeName = sel.DBOFullTypeName
,                Filter = sel.Filter
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Subscription FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Subscription> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DataProviderId = sel.DataProvider == null ? (long?)null : sel.DataProvider.Id,
                DataProviderName = sel.DataProvider == null ? (string)null : sel.DataProvider.Name
,                sel.DTOFullTypeName
,                sel.DBOFullTypeName
,                sel.Filter
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Subscription()
                {
                DataProvider = select.DataProviderId == null? null : new Utis.Minex.ProductionModel.Common.DataProviderServer { Id = (long)select.DataProviderId, Name = (string)select.DataProviderName }
,                DTOFullTypeName = select.DTOFullTypeName
,                DBOFullTypeName = select.DBOFullTypeName
,                Filter = select.Filter
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MapStatePriorityEvent> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MapStatePriorityEvent()
                {
                TFirst = sel.TFirst
,                TSecond = sel.TSecond
,                MapKeys = sel.MapKeys
,                MapValues = sel.MapValues
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MapStatePriorityEvent FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MapStatePriorityEvent()
                {
                TFirst = select.TFirst
,                TSecond = select.TSecond
,                MapKeys = select.MapKeys
,                MapValues = select.MapValues
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MapStatePriorityEvent> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MapStatePriorityEvent()
                {
                TFirst = sel.TFirst
,                TSecond = sel.TSecond
,                MapKeys = sel.MapKeys
,                MapValues = sel.MapValues
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MapStatePriorityEvent FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MapStatePriorityEvent()
                {
                TFirst = select.TFirst
,                TSecond = select.TSecond
,                MapKeys = select.MapKeys
,                MapValues = select.MapValues
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.AntNumber
,                sel.Distance
,                sel.Rssi
,                sel.Datetime
,                sel.TransportPositionEventType
,                sel.TransportName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId }
,                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                AntNumber = sel.AntNumber
,                Distance = sel.Distance
,                Rssi = sel.Rssi
,                Datetime = sel.Datetime
,                TransportPositionEventType = sel.TransportPositionEventType
,                TransportName = sel.TransportName
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.AntNumber
,                sel.Distance
,                sel.Rssi
,                sel.Datetime
,                sel.TransportPositionEventType
,                sel.TransportName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId }
,                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                AntNumber = select.AntNumber
,                Distance = select.Distance
,                Rssi = select.Rssi
,                Datetime = select.Datetime
,                TransportPositionEventType = select.TransportPositionEventType
,                TransportName = select.TransportName
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.AntNumber
,                sel.Distance
,                sel.Rssi
,                sel.Datetime
,                sel.TransportPositionEventType
,                sel.TransportName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId, Name = (string)sel.MobileRegDeviceName }
,                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                AntNumber = sel.AntNumber
,                Distance = sel.Distance
,                Rssi = sel.Rssi
,                Datetime = sel.Datetime
,                TransportPositionEventType = sel.TransportPositionEventType
,                TransportName = sel.TransportName
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.AntNumber
,                sel.Distance
,                sel.Rssi
,                sel.Datetime
,                sel.TransportPositionEventType
,                sel.TransportName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MarkPointTransportAccurateRfid()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId, Name = (string)select.MobileRegDeviceName }
,                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                AntNumber = select.AntNumber
,                Distance = select.Distance
,                Rssi = select.Rssi
,                Datetime = select.Datetime
,                TransportPositionEventType = select.TransportPositionEventType
,                TransportName = select.TransportName
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.GraphicModuleRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.GraphicModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.AccessViewer3Dx
,                sel.EnablePlayBack
,                sel.EnableEmergencyCall
,                sel.EnableEmergencyReset
,                sel.EnablePagerCall
,                sel.EnableSchemeEditor
,                sel.EnableIndividualCalls
,                sel.EnableEditor3D
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.GraphicModuleRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                AccessViewer3Dx = sel.AccessViewer3Dx
,                EnablePlayBack = sel.EnablePlayBack
,                EnableEmergencyCall = sel.EnableEmergencyCall
,                EnableEmergencyReset = sel.EnableEmergencyReset
,                EnablePagerCall = sel.EnablePagerCall
,                EnableSchemeEditor = sel.EnableSchemeEditor
,                EnableIndividualCalls = sel.EnableIndividualCalls
,                EnableEditor3D = sel.EnableEditor3D
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.GraphicModuleRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.GraphicModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.AccessViewer3Dx
,                sel.EnablePlayBack
,                sel.EnableEmergencyCall
,                sel.EnableEmergencyReset
,                sel.EnablePagerCall
,                sel.EnableSchemeEditor
,                sel.EnableIndividualCalls
,                sel.EnableEditor3D
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.GraphicModuleRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                AccessViewer3Dx = select.AccessViewer3Dx
,                EnablePlayBack = select.EnablePlayBack
,                EnableEmergencyCall = select.EnableEmergencyCall
,                EnableEmergencyReset = select.EnableEmergencyReset
,                EnablePagerCall = select.EnablePagerCall
,                EnableSchemeEditor = select.EnableSchemeEditor
,                EnableIndividualCalls = select.EnableIndividualCalls
,                EnableEditor3D = select.EnableEditor3D
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.GraphicModuleRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.GraphicModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.AccessViewer3Dx
,                sel.EnablePlayBack
,                sel.EnableEmergencyCall
,                sel.EnableEmergencyReset
,                sel.EnablePagerCall
,                sel.EnableSchemeEditor
,                sel.EnableIndividualCalls
,                sel.EnableEditor3D
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.GraphicModuleRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                AccessViewer3Dx = sel.AccessViewer3Dx
,                EnablePlayBack = sel.EnablePlayBack
,                EnableEmergencyCall = sel.EnableEmergencyCall
,                EnableEmergencyReset = sel.EnableEmergencyReset
,                EnablePagerCall = sel.EnablePagerCall
,                EnableSchemeEditor = sel.EnableSchemeEditor
,                EnableIndividualCalls = sel.EnableIndividualCalls
,                EnableEditor3D = sel.EnableEditor3D
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.GraphicModuleRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.GraphicModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.AccessViewer3Dx
,                sel.EnablePlayBack
,                sel.EnableEmergencyCall
,                sel.EnableEmergencyReset
,                sel.EnablePagerCall
,                sel.EnableSchemeEditor
,                sel.EnableIndividualCalls
,                sel.EnableEditor3D
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.GraphicModuleRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                AccessViewer3Dx = select.AccessViewer3Dx
,                EnablePlayBack = select.EnablePlayBack
,                EnableEmergencyCall = select.EnableEmergencyCall
,                EnableEmergencyReset = select.EnableEmergencyReset
,                EnablePagerCall = select.EnablePagerCall
,                EnableSchemeEditor = select.EnableSchemeEditor
,                EnableIndividualCalls = select.EnableIndividualCalls
,                EnableEditor3D = select.EnableEditor3D
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.LampmanRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.LampmanRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.EnableMenuPerson
,                sel.EnableMenuLamp
,                sel.EnableMenuLampType
,                sel.EnableMenuRFUnit
,                sel.EnableMenuGasAnalyzer
,                sel.EnableMenuRadio
,                sel.EnableMenuRfidDevice
,                sel.EnableMenuReports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.LampmanRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                EnableMenuPerson = sel.EnableMenuPerson
,                EnableMenuLamp = sel.EnableMenuLamp
,                EnableMenuLampType = sel.EnableMenuLampType
,                EnableMenuRFUnit = sel.EnableMenuRFUnit
,                EnableMenuGasAnalyzer = sel.EnableMenuGasAnalyzer
,                EnableMenuRadio = sel.EnableMenuRadio
,                EnableMenuRfidDevice = sel.EnableMenuRfidDevice
,                EnableMenuReports = sel.EnableMenuReports
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.LampmanRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.LampmanRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.EnableMenuPerson
,                sel.EnableMenuLamp
,                sel.EnableMenuLampType
,                sel.EnableMenuRFUnit
,                sel.EnableMenuGasAnalyzer
,                sel.EnableMenuRadio
,                sel.EnableMenuRfidDevice
,                sel.EnableMenuReports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.LampmanRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                EnableMenuPerson = select.EnableMenuPerson
,                EnableMenuLamp = select.EnableMenuLamp
,                EnableMenuLampType = select.EnableMenuLampType
,                EnableMenuRFUnit = select.EnableMenuRFUnit
,                EnableMenuGasAnalyzer = select.EnableMenuGasAnalyzer
,                EnableMenuRadio = select.EnableMenuRadio
,                EnableMenuRfidDevice = select.EnableMenuRfidDevice
,                EnableMenuReports = select.EnableMenuReports
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.LampmanRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.LampmanRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.EnableMenuPerson
,                sel.EnableMenuLamp
,                sel.EnableMenuLampType
,                sel.EnableMenuRFUnit
,                sel.EnableMenuGasAnalyzer
,                sel.EnableMenuRadio
,                sel.EnableMenuRfidDevice
,                sel.EnableMenuReports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.LampmanRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                EnableMenuPerson = sel.EnableMenuPerson
,                EnableMenuLamp = sel.EnableMenuLamp
,                EnableMenuLampType = sel.EnableMenuLampType
,                EnableMenuRFUnit = sel.EnableMenuRFUnit
,                EnableMenuGasAnalyzer = sel.EnableMenuGasAnalyzer
,                EnableMenuRadio = sel.EnableMenuRadio
,                EnableMenuRfidDevice = sel.EnableMenuRfidDevice
,                EnableMenuReports = sel.EnableMenuReports
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.LampmanRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.LampmanRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.EnableMenuPerson
,                sel.EnableMenuLamp
,                sel.EnableMenuLampType
,                sel.EnableMenuRFUnit
,                sel.EnableMenuGasAnalyzer
,                sel.EnableMenuRadio
,                sel.EnableMenuRfidDevice
,                sel.EnableMenuReports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.LampmanRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                EnableMenuPerson = select.EnableMenuPerson
,                EnableMenuLamp = select.EnableMenuLamp
,                EnableMenuLampType = select.EnableMenuLampType
,                EnableMenuRFUnit = select.EnableMenuRFUnit
,                EnableMenuGasAnalyzer = select.EnableMenuGasAnalyzer
,                EnableMenuRadio = select.EnableMenuRadio
,                EnableMenuRfidDevice = select.EnableMenuRfidDevice
,                EnableMenuReports = select.EnableMenuReports
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.UserName
,                sel.PersonFullName
,                MapStatePriorityEventId = sel.MapStatePriorityEvent == null ? (long?)null : sel.MapStatePriorityEvent.Id
,                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.BeginDate
,                sel.EndDate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId }
,                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                MapStatePriorityEvent = sel.MapStatePriorityEventId == null? null : new Utis.Minex.ProductionModel.MapStatePriorityEvent { Id = (long)sel.MapStatePriorityEventId }
,                TFirst = sel.TFirst
,                TSecond = sel.TSecond
,                MapKeys = sel.MapKeys
,                MapValues = sel.MapValues
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.UserName
,                sel.PersonFullName
,                MapStatePriorityEventId = sel.MapStatePriorityEvent == null ? (long?)null : sel.MapStatePriorityEvent.Id
,                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.BeginDate
,                sel.EndDate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId }
,                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                MapStatePriorityEvent = select.MapStatePriorityEventId == null? null : new Utis.Minex.ProductionModel.MapStatePriorityEvent { Id = (long)select.MapStatePriorityEventId }
,                TFirst = select.TFirst
,                TSecond = select.TSecond
,                MapKeys = select.MapKeys
,                MapValues = select.MapValues
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.UserName
,                sel.PersonFullName
,                MapStatePriorityEventId = sel.MapStatePriorityEvent == null ? (long?)null : sel.MapStatePriorityEvent.Id,
                MapStatePriorityEventName = sel.MapStatePriorityEvent == null ? (string)null : sel.MapStatePriorityEvent.Name
,                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.BeginDate
,                sel.EndDate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId, Name = (string)sel.UserDataName }
,                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                MapStatePriorityEvent = sel.MapStatePriorityEventId == null? null : new Utis.Minex.ProductionModel.MapStatePriorityEvent { Id = (long)sel.MapStatePriorityEventId, Name = (string)sel.MapStatePriorityEventName }
,                TFirst = sel.TFirst
,                TSecond = sel.TSecond
,                MapKeys = sel.MapKeys
,                MapValues = sel.MapValues
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.UserName
,                sel.PersonFullName
,                MapStatePriorityEventId = sel.MapStatePriorityEvent == null ? (long?)null : sel.MapStatePriorityEvent.Id,
                MapStatePriorityEventName = sel.MapStatePriorityEvent == null ? (string)null : sel.MapStatePriorityEvent.Name
,                sel.TFirst
,                sel.TSecond
,                sel.MapKeys
,                sel.MapValues
,                sel.BeginDate
,                sel.EndDate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MapStatePriorityEventChangeHistory()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId, Name = (string)select.UserDataName }
,                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                MapStatePriorityEvent = select.MapStatePriorityEventId == null? null : new Utis.Minex.ProductionModel.MapStatePriorityEvent { Id = (long)select.MapStatePriorityEventId, Name = (string)select.MapStatePriorityEventName }
,                TFirst = select.TFirst
,                TSecond = select.TSecond
,                MapKeys = select.MapKeys
,                MapValues = select.MapValues
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MatrixAccessRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MatrixAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.ResourceType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MatrixAccessRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                ResourceType = sel.ResourceType
,                ActionType = sel.ActionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MatrixAccessRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MatrixAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.ResourceType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MatrixAccessRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                ResourceType = select.ResourceType
,                ActionType = select.ActionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MatrixAccessRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MatrixAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.ResourceType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MatrixAccessRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                ResourceType = sel.ResourceType
,                ActionType = sel.ActionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MatrixAccessRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MatrixAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.ResourceType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MatrixAccessRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                ResourceType = select.ResourceType
,                ActionType = select.ActionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MatrixEventProcessingRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MatrixEventProcessingRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.ResourceEventType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MatrixEventProcessingRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                ResourceEventType = sel.ResourceEventType
,                ActionType = sel.ActionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MatrixEventProcessingRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MatrixEventProcessingRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.ResourceEventType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MatrixEventProcessingRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                ResourceEventType = select.ResourceEventType
,                ActionType = select.ActionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MatrixEventProcessingRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MatrixEventProcessingRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.ResourceEventType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MatrixEventProcessingRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                ResourceEventType = sel.ResourceEventType
,                ActionType = sel.ActionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MatrixEventProcessingRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MatrixEventProcessingRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.ResourceEventType
,                sel.ActionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MatrixEventProcessingRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                ResourceEventType = select.ResourceEventType
,                ActionType = select.ActionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.NoteSignIn> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.NoteSignIn> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ClientGuid
,                sel.SeverGuid
,                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.UserName
,                sel.PersonFullName
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.SignInStatus
,                sel.TimeEnterSignIn
,                sel.TimeExitSignIn
,                sel.IpAddress
,                sel.HostName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.NoteSignIn()
                {
                ClientGuid = sel.ClientGuid
,                SeverGuid = sel.SeverGuid
,                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId }
,                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                SignInStatus = sel.SignInStatus
,                TimeEnterSignIn = sel.TimeEnterSignIn
,                TimeExitSignIn = sel.TimeExitSignIn
,                IpAddress = sel.IpAddress
,                HostName = sel.HostName
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.NoteSignIn FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.NoteSignIn> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ClientGuid
,                sel.SeverGuid
,                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.UserName
,                sel.PersonFullName
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.SignInStatus
,                sel.TimeEnterSignIn
,                sel.TimeExitSignIn
,                sel.IpAddress
,                sel.HostName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.NoteSignIn()
                {
                ClientGuid = select.ClientGuid
,                SeverGuid = select.SeverGuid
,                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId }
,                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                SignInStatus = select.SignInStatus
,                TimeEnterSignIn = select.TimeEnterSignIn
,                TimeExitSignIn = select.TimeExitSignIn
,                IpAddress = select.IpAddress
,                HostName = select.HostName
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.NoteSignIn> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.NoteSignIn> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ClientGuid
,                sel.SeverGuid
,                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.UserName
,                sel.PersonFullName
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.SignInStatus
,                sel.TimeEnterSignIn
,                sel.TimeExitSignIn
,                sel.IpAddress
,                sel.HostName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.NoteSignIn()
                {
                ClientGuid = sel.ClientGuid
,                SeverGuid = sel.SeverGuid
,                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId, Name = (string)sel.UserDataName }
,                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                SignInStatus = sel.SignInStatus
,                TimeEnterSignIn = sel.TimeEnterSignIn
,                TimeExitSignIn = sel.TimeExitSignIn
,                IpAddress = sel.IpAddress
,                HostName = sel.HostName
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.NoteSignIn FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.NoteSignIn> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ClientGuid
,                sel.SeverGuid
,                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.UserName
,                sel.PersonFullName
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.SignInStatus
,                sel.TimeEnterSignIn
,                sel.TimeExitSignIn
,                sel.IpAddress
,                sel.HostName
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.NoteSignIn()
                {
                ClientGuid = select.ClientGuid
,                SeverGuid = select.SeverGuid
,                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId, Name = (string)select.UserDataName }
,                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                SignInStatus = select.SignInStatus
,                TimeEnterSignIn = select.TimeEnterSignIn
,                TimeExitSignIn = select.TimeExitSignIn
,                IpAddress = select.IpAddress
,                HostName = select.HostName
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.OldPass> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.OldPass> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.TimeBeginOfPass
,                sel.TimeEndOfPass
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.OldPass()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId }
,                TimeBeginOfPass = sel.TimeBeginOfPass
,                TimeEndOfPass = sel.TimeEndOfPass
,                SaltValue = sel.SaltValue
,                HashValue = sel.HashValue
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.OldPass FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.OldPass> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                sel.TimeBeginOfPass
,                sel.TimeEndOfPass
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.OldPass()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId }
,                TimeBeginOfPass = select.TimeBeginOfPass
,                TimeEndOfPass = select.TimeEndOfPass
,                SaltValue = select.SaltValue
,                HashValue = select.HashValue
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.OldPass> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.OldPass> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.TimeBeginOfPass
,                sel.TimeEndOfPass
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.OldPass()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId, Name = (string)sel.UserDataName }
,                TimeBeginOfPass = sel.TimeBeginOfPass
,                TimeEndOfPass = sel.TimeEndOfPass
,                SaltValue = sel.SaltValue
,                HashValue = sel.HashValue
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.OldPass FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.OldPass> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                sel.TimeBeginOfPass
,                sel.TimeEndOfPass
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.OldPass()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId, Name = (string)select.UserDataName }
,                TimeBeginOfPass = select.TimeBeginOfPass
,                TimeEndOfPass = select.TimeEndOfPass
,                SaltValue = select.SaltValue
,                HashValue = select.HashValue
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.ReportAccessRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.ReportAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.Reports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.ReportAccessRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                Reports = sel.Reports
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.ReportAccessRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.ReportAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.Reports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.ReportAccessRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                Reports = select.Reports
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.ReportAccessRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.ReportAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.Reports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.ReportAccessRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                Reports = sel.Reports
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.ReportAccessRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.ReportAccessRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.Reports
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.ReportAccessRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                Reports = select.Reports
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Role> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Role> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RoleDescr
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Role()
                {
                RoleDescr = sel.RoleDescr
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Role FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Role> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RoleDescr
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Role()
                {
                RoleDescr = select.RoleDescr
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Role> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Role> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RoleDescr
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Role()
                {
                RoleDescr = sel.RoleDescr
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Role FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Role> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RoleDescr
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Role()
                {
                RoleDescr = select.RoleDescr
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.TransportModuleRights> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.TransportModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.EnableTransportChiefControl
,                sel.EnableOpenedDowntimeControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.TransportModuleRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                EnableTransportChiefControl = sel.EnableTransportChiefControl
,                EnableOpenedDowntimeControl = sel.EnableOpenedDowntimeControl
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.TransportModuleRights FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.TransportModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.EnableTransportChiefControl
,                sel.EnableOpenedDowntimeControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.TransportModuleRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                EnableTransportChiefControl = select.EnableTransportChiefControl
,                EnableOpenedDowntimeControl = select.EnableOpenedDowntimeControl
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.TransportModuleRights> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.TransportModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.EnableTransportChiefControl
,                sel.EnableOpenedDowntimeControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.TransportModuleRights()
                {
                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                EnableTransportChiefControl = sel.EnableTransportChiefControl
,                EnableOpenedDowntimeControl = sel.EnableOpenedDowntimeControl
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.TransportModuleRights FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.TransportModuleRights> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.EnableTransportChiefControl
,                sel.EnableOpenedDowntimeControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.TransportModuleRights()
                {
                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                EnableTransportChiefControl = select.EnableTransportChiefControl
,                EnableOpenedDowntimeControl = select.EnableOpenedDowntimeControl
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserData> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.UserData> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.UserName
,                sel.PersonFullName
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.HasConfirmDisclaimer
,                sel.IsBlocked
,                sel.BlockingReason
,                sel.PassChangeRequired
,                sel.TimeOfPassChange
,                sel.TimeOfPassExpiration
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserData()
                {
                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId }
,                HasConfirmDisclaimer = sel.HasConfirmDisclaimer
,                IsBlocked = sel.IsBlocked
,                BlockingReason = sel.BlockingReason
,                PassChangeRequired = sel.PassChangeRequired
,                TimeOfPassChange = sel.TimeOfPassChange
,                TimeOfPassExpiration = sel.TimeOfPassExpiration
,                SaltValue = sel.SaltValue
,                HashValue = sel.HashValue
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserData FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.UserData> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.UserName
,                sel.PersonFullName
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id
,                sel.HasConfirmDisclaimer
,                sel.IsBlocked
,                sel.BlockingReason
,                sel.PassChangeRequired
,                sel.TimeOfPassChange
,                sel.TimeOfPassExpiration
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserData()
                {
                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId }
,                HasConfirmDisclaimer = select.HasConfirmDisclaimer
,                IsBlocked = select.IsBlocked
,                BlockingReason = select.BlockingReason
,                PassChangeRequired = select.PassChangeRequired
,                TimeOfPassChange = select.TimeOfPassChange
,                TimeOfPassExpiration = select.TimeOfPassExpiration
,                SaltValue = select.SaltValue
,                HashValue = select.HashValue
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserData> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.UserData> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.UserName
,                sel.PersonFullName
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.HasConfirmDisclaimer
,                sel.IsBlocked
,                sel.BlockingReason
,                sel.PassChangeRequired
,                sel.TimeOfPassChange
,                sel.TimeOfPassExpiration
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserData()
                {
                UserName = sel.UserName
,                PersonFullName = sel.PersonFullName
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Role = sel.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)sel.RoleId, Name = (string)sel.RoleName }
,                HasConfirmDisclaimer = sel.HasConfirmDisclaimer
,                IsBlocked = sel.IsBlocked
,                BlockingReason = sel.BlockingReason
,                PassChangeRequired = sel.PassChangeRequired
,                TimeOfPassChange = sel.TimeOfPassChange
,                TimeOfPassExpiration = sel.TimeOfPassExpiration
,                SaltValue = sel.SaltValue
,                HashValue = sel.HashValue
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserData FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.UserData> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.UserName
,                sel.PersonFullName
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                RoleId = sel.Role == null ? (long?)null : sel.Role.Id,
                RoleName = sel.Role == null ? (string)null : sel.Role.Name
,                sel.HasConfirmDisclaimer
,                sel.IsBlocked
,                sel.BlockingReason
,                sel.PassChangeRequired
,                sel.TimeOfPassChange
,                sel.TimeOfPassExpiration
,                sel.SaltValue
,                sel.HashValue
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserData()
                {
                UserName = select.UserName
,                PersonFullName = select.PersonFullName
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Role = select.RoleId == null? null : new Utis.Minex.ProductionModel.Role { Id = (long)select.RoleId, Name = (string)select.RoleName }
,                HasConfirmDisclaimer = select.HasConfirmDisclaimer
,                IsBlocked = select.IsBlocked
,                BlockingReason = select.BlockingReason
,                PassChangeRequired = select.PassChangeRequired
,                TimeOfPassChange = select.TimeOfPassChange
,                TimeOfPassExpiration = select.TimeOfPassExpiration
,                SaltValue = select.SaltValue
,                HashValue = select.HashValue
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord()
                {
                Password = sel.Password
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord()
                {
                Password = select.Password
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord()
                {
                Password = sel.Password
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserRights.PasswordBlackListRecord()
                {
                Password = select.Password
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                IndividualDevicesRoomId = sel.IndividualDevicesRoom == null ? (long?)null : sel.IndividualDevicesRoom.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId }
,                IndividualDevicesRoom = sel.IndividualDevicesRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.IndividualDevicesRoomId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id
,                IndividualDevicesRoomId = sel.IndividualDevicesRoom == null ? (long?)null : sel.IndividualDevicesRoom.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId }
,                IndividualDevicesRoom = select.IndividualDevicesRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.IndividualDevicesRoomId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                IndividualDevicesRoomId = sel.IndividualDevicesRoom == null ? (long?)null : sel.IndividualDevicesRoom.Id,
                IndividualDevicesRoomName = sel.IndividualDevicesRoom == null ? (string)null : sel.IndividualDevicesRoom.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom()
                {
                UserData = sel.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserDataId, Name = (string)sel.UserDataName }
,                IndividualDevicesRoom = sel.IndividualDevicesRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.IndividualDevicesRoomId, Name = (string)sel.IndividualDevicesRoomName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                UserDataId = sel.UserData == null ? (long?)null : sel.UserData.Id,
                UserDataName = sel.UserData == null ? (string)null : sel.UserData.Name
,                IndividualDevicesRoomId = sel.IndividualDevicesRoom == null ? (long?)null : sel.IndividualDevicesRoom.Id,
                IndividualDevicesRoomName = sel.IndividualDevicesRoom == null ? (string)null : sel.IndividualDevicesRoom.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.UserRights.UserBindDeviceRoom()
                {
                UserData = select.UserDataId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserDataId, Name = (string)select.UserDataName }
,                IndividualDevicesRoom = select.IndividualDevicesRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.IndividualDevicesRoomId, Name = (string)select.IndividualDevicesRoomName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue()
                {
                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.AnchorHittingRValue()
                {
                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue()
                {
                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.MineDivisionRValue()
                {
                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerSendCommandId = sel.PagerSendCommand == null ? (long?)null : sel.PagerSendCommand.Id
,                sel.State
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue()
                {
                PagerSendCommand = sel.PagerSendCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand { Id = (long)sel.PagerSendCommandId }
,                State = sel.State
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerSendCommandId = sel.PagerSendCommand == null ? (long?)null : sel.PagerSendCommand.Id
,                sel.State
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue()
                {
                PagerSendCommand = select.PagerSendCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand { Id = (long)select.PagerSendCommandId }
,                State = select.State
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerSendCommandId = sel.PagerSendCommand == null ? (long?)null : sel.PagerSendCommand.Id,
                PagerSendCommandName = sel.PagerSendCommand == null ? (string)null : sel.PagerSendCommand.Name
,                sel.State
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue()
                {
                PagerSendCommand = sel.PagerSendCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand { Id = (long)sel.PagerSendCommandId, Name = (string)sel.PagerSendCommandName }
,                State = sel.State
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerSendCommandId = sel.PagerSendCommand == null ? (long?)null : sel.PagerSendCommand.Id,
                PagerSendCommandName = sel.PagerSendCommand == null ? (string)null : sel.PagerSendCommand.Name
,                sel.State
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.PagerCommandRValue()
                {
                PagerSendCommand = select.PagerSendCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand { Id = (long)select.PagerSendCommandId, Name = (string)select.PagerSendCommandName }
,                State = select.State
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                IndividualDeviceIssueState = sel.IndividualDeviceIssueState
,                CardNumber = sel.CardNumber
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                IndividualDeviceIssueState = select.IndividualDeviceIssueState
,                CardNumber = select.CardNumber
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                IndividualDeviceIssueState = sel.IndividualDeviceIssueState
,                CardNumber = sel.CardNumber
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.State.IndividualDeviceRValue()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                IndividualDeviceIssueState = select.IndividualDeviceIssueState
,                CardNumber = select.CardNumber
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PersonOperationType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.Antenna
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue()
                {
                PersonOperationType = sel.PersonOperationType
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                Antenna = sel.Antenna
,                Working = sel.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingId }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PersonOperationType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.Antenna
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Movement.PersonMovementRValue()
                {
                PersonOperationType = select.PersonOperationType
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                Antenna = select.Antenna
,                Working = select.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingId }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.GasAnalyzerStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.LampStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MarkPointStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.MobileMarkPointStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.RadioStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue()
                {
                Status = sel.Status
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Status
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.DeviceStatus.ReaderStatusRValue()
                {
                Status = select.Status
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Dateout
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Bind.IndividualDeviceBindRValue()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue()
                {
                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Bind.LampDeviceBindRValue()
                {
                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonalCardId = sel.PersonalCard == null ? (long?)null : sel.PersonalCard.Id
,                sel.BeginDateTime
,                sel.EndDateTime
,                sel.Activity
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue()
                {
                PersonalCard = sel.PersonalCardId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard { Id = (long)sel.PersonalCardId }
,                BeginDateTime = sel.BeginDateTime
,                EndDateTime = sel.EndDateTime
,                Activity = sel.Activity
,                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension { Id = (long)sel.DimensionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonalCardId = sel.PersonalCard == null ? (long?)null : sel.PersonalCard.Id
,                sel.BeginDateTime
,                sel.EndDateTime
,                sel.Activity
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue()
                {
                PersonalCard = select.PersonalCardId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard { Id = (long)select.PersonalCardId }
,                BeginDateTime = select.BeginDateTime
,                EndDateTime = select.EndDateTime
,                Activity = select.Activity
,                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonalCardId = sel.PersonalCard == null ? (long?)null : sel.PersonalCard.Id,
                PersonalCardName = sel.PersonalCard == null ? (string)null : sel.PersonalCard.Name
,                sel.BeginDateTime
,                sel.EndDateTime
,                sel.Activity
,                sel.Dateout
,                sel.Datetime
,                sel.Dimension
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue()
                {
                PersonalCard = sel.PersonalCardId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard { Id = (long)sel.PersonalCardId, Name = (string)sel.PersonalCardName }
,                BeginDateTime = sel.BeginDateTime
,                EndDateTime = sel.EndDateTime
,                Activity = sel.Activity
,                Dateout = sel.Dateout
,                Datetime = sel.Datetime
,                Dimension = sel.Dimension
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonalCardId = sel.PersonalCard == null ? (long?)null : sel.PersonalCard.Id,
                PersonalCardName = sel.PersonalCard == null ? (string)null : sel.PersonalCard.Name
,                sel.BeginDateTime
,                sel.EndDateTime
,                sel.Activity
,                sel.Dateout
,                sel.Datetime
,                DimensionId = sel.Dimension == null ? (long?)null : sel.Dimension.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Value.Bind.PersonCardBindRValue()
                {
                PersonalCard = select.PersonalCardId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard { Id = (long)select.PersonalCardId, Name = (string)select.PersonalCardName }
,                BeginDateTime = select.BeginDateTime
,                EndDateTime = select.EndDateTime
,                Activity = select.Activity
,                Dateout = select.Dateout
,                Datetime = select.Datetime
,                Dimension = select.DimensionId == null? null : new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension { Id = (long)select.DimensionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension()
                {
                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.AnchorHittingRDimension()
                {
                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.MineDivisionRDimension()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension()
                {
                Pager = sel.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)sel.PagerId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension()
                {
                Pager = select.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)select.PagerId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id,
                PagerName = sel.Pager == null ? (string)null : sel.Pager.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension()
                {
                Pager = sel.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)sel.PagerId, Name = (string)sel.PagerName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id,
                PagerName = sel.Pager == null ? (string)null : sel.Pager.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.PagerCommandRDimension()
                {
                Pager = select.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)select.PagerId, Name = (string)select.PagerName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.State.IndividualDeviceRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Movement.PersonMovementRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.Antenna
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.OperationType
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                Antenna = sel.Antenna
,                Working = sel.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingId }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                OperationType = sel.OperationType
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.Antenna
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.OperationType
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Movement.TransportMovement()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                Antenna = select.Antenna
,                Working = select.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingId }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                OperationType = select.OperationType
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension()
                {
                GasAnalyzer = sel.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)sel.GasAnalyzerId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension()
                {
                GasAnalyzer = select.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)select.GasAnalyzerId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id,
                GasAnalyzerName = sel.GasAnalyzer == null ? (string)null : sel.GasAnalyzer.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension()
                {
                GasAnalyzer = sel.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)sel.GasAnalyzerId, Name = (string)sel.GasAnalyzerName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id,
                GasAnalyzerName = sel.GasAnalyzer == null ? (string)null : sel.GasAnalyzer.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.GasAnalyzerStatusRDimension()
                {
                GasAnalyzer = select.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)select.GasAnalyzerId, Name = (string)select.GasAnalyzerName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension()
                {
                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension()
                {
                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension()
                {
                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId, Name = (string)sel.LampName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.LampStatusRDimension()
                {
                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId, Name = (string)select.LampName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MarkPointStatusRDimension()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileMarkPointId = sel.MobileMarkPoint == null ? (long?)null : sel.MobileMarkPoint.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension()
                {
                MobileMarkPoint = sel.MobileMarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MobileMarkPoint { Id = (long)sel.MobileMarkPointId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileMarkPointId = sel.MobileMarkPoint == null ? (long?)null : sel.MobileMarkPoint.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension()
                {
                MobileMarkPoint = select.MobileMarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MobileMarkPoint { Id = (long)select.MobileMarkPointId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileMarkPointId = sel.MobileMarkPoint == null ? (long?)null : sel.MobileMarkPoint.Id,
                MobileMarkPointName = sel.MobileMarkPoint == null ? (string)null : sel.MobileMarkPoint.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension()
                {
                MobileMarkPoint = sel.MobileMarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MobileMarkPoint { Id = (long)sel.MobileMarkPointId, Name = (string)sel.MobileMarkPointName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileMarkPointId = sel.MobileMarkPoint == null ? (long?)null : sel.MobileMarkPoint.Id,
                MobileMarkPointName = sel.MobileMarkPoint == null ? (string)null : sel.MobileMarkPoint.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.MobileMarkPointStatusRDimension()
                {
                MobileMarkPoint = select.MobileMarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MobileMarkPoint { Id = (long)select.MobileMarkPointId, Name = (string)select.MobileMarkPointName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension()
                {
                Radio = sel.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)sel.RadioId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension()
                {
                Radio = select.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)select.RadioId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id,
                RadioName = sel.Radio == null ? (string)null : sel.Radio.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension()
                {
                Radio = sel.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)sel.RadioId, Name = (string)sel.RadioName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id,
                RadioName = sel.Radio == null ? (string)null : sel.Radio.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.RadioStatusRDimension()
                {
                Radio = select.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)select.RadioId, Name = (string)select.RadioName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.DeviceStatus.ReaderStatusRDimension()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.IndividualDeviceBindRDimension()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension()
                {
                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension()
                {
                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension()
                {
                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId, Name = (string)sel.LampName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.LampDeviceBindRDimension()
                {
                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId, Name = (string)select.LampName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Register.Dimension.Bind.PersonCardBindRDimension()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.EmergencyCallType
,                sel.CallerName
,                DispatcherCommandId = sel.DispatcherCommand == null ? (long?)null : sel.DispatcherCommand.Id
,                sel.Label
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority()
                {
                EmergencyCallType = sel.EmergencyCallType
,                CallerName = sel.CallerName
,                DispatcherCommand = sel.DispatcherCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand { Id = (long)sel.DispatcherCommandId }
,                Label = sel.Label
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.EmergencyCallType
,                sel.CallerName
,                DispatcherCommandId = sel.DispatcherCommand == null ? (long?)null : sel.DispatcherCommand.Id
,                sel.Label
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority()
                {
                EmergencyCallType = select.EmergencyCallType
,                CallerName = select.CallerName
,                DispatcherCommand = select.DispatcherCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand { Id = (long)select.DispatcherCommandId }
,                Label = select.Label
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.EmergencyCallType
,                sel.CallerName
,                DispatcherCommandId = sel.DispatcherCommand == null ? (long?)null : sel.DispatcherCommand.Id,
                DispatcherCommandName = sel.DispatcherCommand == null ? (string)null : sel.DispatcherCommand.Name
,                sel.Label
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority()
                {
                EmergencyCallType = sel.EmergencyCallType
,                CallerName = sel.CallerName
,                DispatcherCommand = sel.DispatcherCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand { Id = (long)sel.DispatcherCommandId, Name = (string)sel.DispatcherCommandName }
,                Label = sel.Label
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.EmergencyCallType
,                sel.CallerName
,                DispatcherCommandId = sel.DispatcherCommand == null ? (long?)null : sel.DispatcherCommand.Id,
                DispatcherCommandName = sel.DispatcherCommand == null ? (string)null : sel.DispatcherCommand.Name
,                sel.Label
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.EmergencyCallEventPriority()
                {
                EmergencyCallType = select.EmergencyCallType
,                CallerName = select.CallerName
,                DispatcherCommand = select.DispatcherCommandId == null? null : new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand { Id = (long)select.DispatcherCommandId, Name = (string)select.DispatcherCommandName }
,                Label = select.Label
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Alarm
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.EmergencyType
,                sel.SourceType
,                sel.ReceivingType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority()
                {
                Alarm = sel.Alarm
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                EmergencyType = sel.EmergencyType
,                SourceType = sel.SourceType
,                ReceivingType = sel.ReceivingType
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Alarm
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.EmergencyType
,                sel.SourceType
,                sel.ReceivingType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority()
                {
                Alarm = select.Alarm
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                EmergencyType = select.EmergencyType
,                SourceType = select.SourceType
,                ReceivingType = select.ReceivingType
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Alarm
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.EmergencyType
,                sel.SourceType
,                sel.ReceivingType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority()
                {
                Alarm = sel.Alarm
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                EmergencyType = sel.EmergencyType
,                SourceType = sel.SourceType
,                ReceivingType = sel.ReceivingType
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Alarm
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.EmergencyType
,                sel.SourceType
,                sel.ReceivingType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.EmergencyEventPriority()
                {
                Alarm = select.Alarm
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                EmergencyType = select.EmergencyType
,                SourceType = select.SourceType
,                ReceivingType = select.ReceivingType
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.Position
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Antenna
,                sel.Distance
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                Position = sel.Position
,                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                Antenna = sel.Antenna
,                Distance = sel.Distance
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.Position
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Antenna
,                sel.Distance
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                Position = select.Position
,                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                Antenna = select.Antenna
,                Distance = select.Distance
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.Position
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Antenna
,                sel.Distance
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                Position = sel.Position
,                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                Antenna = sel.Antenna
,                Distance = sel.Distance
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId, Name = (string)sel.ZoneName }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.Position
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Antenna
,                sel.Distance
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.MarkPointInMoveEventPriority()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                Position = select.Position
,                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                Antenna = select.Antenna
,                Distance = select.Distance
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId, Name = (string)select.ZoneName }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.ThresholdAlarm
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.LastDatetime
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                ThresholdAlarm = sel.ThresholdAlarm
,                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId }
,                LastDatetime = sel.LastDatetime
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.ThresholdAlarm
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.LastDatetime
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                ThresholdAlarm = select.ThresholdAlarm
,                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId }
,                LastDatetime = select.LastDatetime
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.ThresholdAlarm
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.LastDatetime
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                ThresholdAlarm = sel.ThresholdAlarm
,                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId, Name = (string)sel.MobileRegDeviceName }
,                LastDatetime = sel.LastDatetime
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.ThresholdAlarm
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.LastDatetime
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.MarkPointTransportFixationStatus()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                ThresholdAlarm = select.ThresholdAlarm
,                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId, Name = (string)select.MobileRegDeviceName }
,                LastDatetime = select.LastDatetime
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Text
,                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id
,                sel.EventType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority()
                {
                Text = sel.Text
,                Pager = sel.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)sel.PagerId }
,                EventType = sel.EventType
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Text
,                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id
,                sel.EventType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority()
                {
                Text = select.Text
,                Pager = select.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)select.PagerId }
,                EventType = select.EventType
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Text
,                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id,
                PagerName = sel.Pager == null ? (string)null : sel.Pager.Name
,                sel.EventType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority()
                {
                Text = sel.Text
,                Pager = sel.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)sel.PagerId, Name = (string)sel.PagerName }
,                EventType = sel.EventType
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Text
,                PagerId = sel.Pager == null ? (long?)null : sel.Pager.Id,
                PagerName = sel.Pager == null ? (string)null : sel.Pager.Name
,                sel.EventType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PagerEventPriority()
                {
                Text = select.Text
,                Pager = select.PagerId == null? null : new Utis.Minex.ProductionModel.Devices.Pager { Id = (long)select.PagerId, Name = (string)select.PagerName }
,                EventType = select.EventType
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.State
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority()
                {
                State = sel.State
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.State
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority()
                {
                State = select.State
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.State
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority()
                {
                State = sel.State
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.State
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PuksConnectedEventPriority()
                {
                State = select.State
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PuksMessage
,                sel.AlarmNumber
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority()
                {
                PuksMessage = sel.PuksMessage
,                AlarmNumber = sel.AlarmNumber
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PuksMessage
,                sel.AlarmNumber
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority()
                {
                PuksMessage = select.PuksMessage
,                AlarmNumber = select.AlarmNumber
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PuksMessage
,                sel.AlarmNumber
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority()
                {
                PuksMessage = sel.PuksMessage
,                AlarmNumber = sel.AlarmNumber
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PuksMessage
,                sel.AlarmNumber
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.PuksMessageEventPriority()
                {
                PuksMessage = select.PuksMessage
,                AlarmNumber = select.AlarmNumber
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId, Name = (string)sel.LineConfigName }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ReaderToLineChangedEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId, Name = (string)select.LineConfigName }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TrafficLightReaderId = sel.TrafficLightReader == null ? (long?)null : sel.TrafficLightReader.Id
,                sel.TrafficLightState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority()
                {
                TrafficLightReader = sel.TrafficLightReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.TrafficLightReaderId }
,                TrafficLightState = sel.TrafficLightState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TrafficLightReaderId = sel.TrafficLightReader == null ? (long?)null : sel.TrafficLightReader.Id
,                sel.TrafficLightState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority()
                {
                TrafficLightReader = select.TrafficLightReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.TrafficLightReaderId }
,                TrafficLightState = select.TrafficLightState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TrafficLightReaderId = sel.TrafficLightReader == null ? (long?)null : sel.TrafficLightReader.Id,
                TrafficLightReaderName = sel.TrafficLightReader == null ? (string)null : sel.TrafficLightReader.Name
,                sel.TrafficLightState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority()
                {
                TrafficLightReader = sel.TrafficLightReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.TrafficLightReaderId, Name = (string)sel.TrafficLightReaderName }
,                TrafficLightState = sel.TrafficLightState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TrafficLightReaderId = sel.TrafficLightReader == null ? (long?)null : sel.TrafficLightReader.Id,
                TrafficLightReaderName = sel.TrafficLightReader == null ? (string)null : sel.TrafficLightReader.Name
,                sel.TrafficLightState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TrafficLightEventPriority()
                {
                TrafficLightReader = select.TrafficLightReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.TrafficLightReaderId, Name = (string)select.TrafficLightReaderName }
,                TrafficLightState = select.TrafficLightState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.TransportBreakState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                TransportBreakState = sel.TransportBreakState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.TransportBreakState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                TransportBreakState = select.TransportBreakState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                sel.TransportBreakState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                TransportBreakState = sel.TransportBreakState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                sel.TransportBreakState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportBreakEventPriority()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                TransportBreakState = select.TransportBreakState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ConnectionState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority()
                {
                ConnectionState = sel.ConnectionState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ConnectionState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority()
                {
                ConnectionState = select.ConnectionState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ConnectionState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority()
                {
                ConnectionState = sel.ConnectionState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ConnectionState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportModuleConnectionEventPriority()
                {
                ConnectionState = select.ConnectionState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SourceId
,                sel.SourceType
,                sel.TransportLabel
,                sel.TransportType
,                sel.Passangers
,                sel.Drivers
,                sel.IsSintetic
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority()
                {
                SourceId = sel.SourceId
,                SourceType = sel.SourceType
,                TransportLabel = sel.TransportLabel
,                TransportType = sel.TransportType
,                Passangers = sel.Passangers
,                Drivers = sel.Drivers
,                IsSintetic = sel.IsSintetic
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SourceId
,                sel.SourceType
,                sel.TransportLabel
,                sel.TransportType
,                sel.Passangers
,                sel.Drivers
,                sel.IsSintetic
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority()
                {
                SourceId = select.SourceId
,                SourceType = select.SourceType
,                TransportLabel = select.TransportLabel
,                TransportType = select.TransportType
,                Passangers = select.Passangers
,                Drivers = select.Drivers
,                IsSintetic = select.IsSintetic
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SourceId
,                sel.SourceType
,                sel.TransportLabel
,                sel.TransportType
,                sel.Passangers
,                sel.Drivers
,                sel.IsSintetic
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority()
                {
                SourceId = sel.SourceId
,                SourceType = sel.SourceType
,                TransportLabel = sel.TransportLabel
,                TransportType = sel.TransportType
,                Passangers = sel.Passangers
,                Drivers = sel.Drivers
,                IsSintetic = sel.IsSintetic
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SourceId
,                sel.SourceType
,                sel.TransportLabel
,                sel.TransportType
,                sel.Passangers
,                sel.Drivers
,                sel.IsSintetic
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TransportPersonsEventPriority()
                {
                SourceId = select.SourceId
,                SourceType = select.SourceType
,                TransportLabel = select.TransportLabel
,                TransportType = select.TransportType
,                Passangers = select.Passangers
,                Drivers = select.Drivers
,                IsSintetic = select.IsSintetic
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ZoneDangerousId
,                sel.Type
,                sel.DamagedDevices
,                sel.TypeStatuses
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority()
                {
                ZoneId = sel.ZoneId
,                ZoneDangerousId = sel.ZoneDangerousId
,                Type = sel.Type
,                DamagedDevices = sel.DamagedDevices
,                TypeStatuses = sel.TypeStatuses
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ZoneDangerousId
,                sel.Type
,                sel.DamagedDevices
,                sel.TypeStatuses
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority()
                {
                ZoneId = select.ZoneId
,                ZoneDangerousId = select.ZoneDangerousId
,                Type = select.Type
,                DamagedDevices = select.DamagedDevices
,                TypeStatuses = select.TypeStatuses
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ZoneDangerousId
,                sel.Type
,                sel.DamagedDevices
,                sel.TypeStatuses
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority()
                {
                ZoneId = sel.ZoneId
,                ZoneDangerousId = sel.ZoneDangerousId
,                Type = sel.Type
,                DamagedDevices = sel.DamagedDevices
,                TypeStatuses = sel.TypeStatuses
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ZoneDangerousId
,                sel.Type
,                sel.DamagedDevices
,                sel.TypeStatuses
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ZoneDangerousEventPriority()
                {
                ZoneId = select.ZoneId
,                ZoneDangerousId = select.ZoneDangerousId
,                Type = select.Type
,                DamagedDevices = select.DamagedDevices
,                TypeStatuses = select.TypeStatuses
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ObjectLabel
,                sel.ObjectType
,                sel.Type
,                sel.ObjectId
,                sel.ViolationTypes
,                sel.GuardZoneId
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority()
                {
                ZoneId = sel.ZoneId
,                ObjectLabel = sel.ObjectLabel
,                ObjectType = sel.ObjectType
,                Type = sel.Type
,                ObjectId = sel.ObjectId
,                ViolationTypes = sel.ViolationTypes
,                GuardZoneId = sel.GuardZoneId
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ObjectLabel
,                sel.ObjectType
,                sel.Type
,                sel.ObjectId
,                sel.ViolationTypes
,                sel.GuardZoneId
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority()
                {
                ZoneId = select.ZoneId
,                ObjectLabel = select.ObjectLabel
,                ObjectType = select.ObjectType
,                Type = select.Type
,                ObjectId = select.ObjectId
,                ViolationTypes = select.ViolationTypes
,                GuardZoneId = select.GuardZoneId
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ObjectLabel
,                sel.ObjectType
,                sel.Type
,                sel.ObjectId
,                sel.ViolationTypes
,                sel.GuardZoneId
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority()
                {
                ZoneId = sel.ZoneId
,                ObjectLabel = sel.ObjectLabel
,                ObjectType = sel.ObjectType
,                Type = sel.Type
,                ObjectId = sel.ObjectId
,                ViolationTypes = sel.ViolationTypes
,                GuardZoneId = sel.GuardZoneId
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneId
,                sel.ObjectLabel
,                sel.ObjectType
,                sel.Type
,                sel.ObjectId
,                sel.ViolationTypes
,                sel.GuardZoneId
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.ZoneEventPriority()
                {
                ZoneId = select.ZoneId
,                ObjectLabel = select.ObjectLabel
,                ObjectType = select.ObjectType
,                Type = select.Type
,                ObjectId = select.ObjectId
,                ViolationTypes = select.ViolationTypes
,                GuardZoneId = select.GuardZoneId
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Amperage
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry()
                {
                Amperage = sel.Amperage
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Amperage
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.AmperageEventTelemetry()
                {
                Amperage = select.Amperage
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BatteryState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry()
                {
                BatteryState = sel.BatteryState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BatteryState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.BatteryStateEventTelemetry()
                {
                BatteryState = select.BatteryState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Capacity
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry()
                {
                Capacity = sel.Capacity
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Capacity
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapacityEventTelemetry()
                {
                Capacity = select.Capacity
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Temperature
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry()
                {
                Temperature = sel.Temperature
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Temperature
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CapTemperatureEventTelemetry()
                {
                Temperature = select.Temperature
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChargeLevel
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry()
                {
                ChargeLevel = sel.ChargeLevel
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChargeLevel
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargeLevelEventTelemetry()
                {
                ChargeLevel = select.ChargeLevel
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChargePercent
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry()
                {
                ChargePercent = sel.ChargePercent
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChargePercent
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.ChargePercentEventTelemetry()
                {
                ChargePercent = select.ChargePercent
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CoverState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry()
                {
                CoverState = sel.CoverState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CoverState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.CoverStateEventTelemetry()
                {
                CoverState = select.CoverState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.FreezeType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry()
                {
                FreezeType = sel.FreezeType
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.FreezeType
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.FreezeEventTelemetry()
                {
                FreezeType = select.FreezeType
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MoveState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry()
                {
                MoveState = sel.MoveState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MoveState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.MoveEventTelemetry()
                {
                MoveState = select.MoveState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PowerSupply
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry()
                {
                PowerSupply = sel.PowerSupply
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PowerSupply
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.PowerSupplyEventTelemetry()
                {
                PowerSupply = select.PowerSupply
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Voltage
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry()
                {
                Voltage = sel.Voltage
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Voltage
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.VoltageEventTelemetry()
                {
                Voltage = select.Voltage
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MethaneLevel
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry()
                {
                MethaneLevel = sel.MethaneLevel
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MethaneLevel
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethaneLevelEventTelemetry()
                {
                MethaneLevel = select.MethaneLevel
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PPM
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry()
                {
                PPM = sel.PPM
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PPM
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.TelemetryEvent.Methane.MethanePPMEventTelemetry()
                {
                PPM = select.PPM
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Antenna
,                sel.AntennaState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                Antenna = sel.Antenna
,                AntennaState = sel.AntennaState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Antenna
,                sel.AntennaState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                Antenna = select.Antenna
,                AntennaState = select.AntennaState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Antenna
,                sel.AntennaState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                Antenna = sel.Antenna
,                AntennaState = sel.AntennaState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Antenna
,                sel.AntennaState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.AntennaStateEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                Antenna = select.Antenna
,                AntennaState = select.AntennaState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderId
,                sel.ProviderState
,                sel.Host
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority()
                {
                DataProviderId = sel.DataProviderId
,                ProviderState = sel.ProviderState
,                Host = sel.Host
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderId
,                sel.ProviderState
,                sel.Host
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority()
                {
                DataProviderId = select.DataProviderId
,                ProviderState = select.ProviderState
,                Host = select.Host
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderId
,                sel.ProviderState
,                sel.Host
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority()
                {
                DataProviderId = sel.DataProviderId
,                ProviderState = sel.ProviderState
,                Host = sel.Host
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderId
,                sel.ProviderState
,                sel.Host
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DataProviderStateEventPriority()
                {
                DataProviderId = select.DataProviderId
,                ProviderState = select.ProviderState
,                Host = select.Host
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DeviceState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority()
                {
                DeviceState = sel.DeviceState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DeviceState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.DeviceStateEventPriority()
                {
                DeviceState = select.DeviceState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.LineState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority()
                {
                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId }
,                LineState = sel.LineState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.LineState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority()
                {
                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId }
,                LineState = select.LineState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.LineState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority()
                {
                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId, Name = (string)sel.LineConfigName }
,                LineState = sel.LineState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.LineState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.LineStateEventPriority()
                {
                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId, Name = (string)select.LineConfigName }
,                LineState = select.LineState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.PortNum
,                sel.PortState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority()
                {
                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId }
,                PortNum = sel.PortNum
,                PortState = sel.PortState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.PortNum
,                sel.PortState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority()
                {
                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId }
,                PortNum = select.PortNum
,                PortState = select.PortState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.PortNum
,                sel.PortState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority()
                {
                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId, Name = (string)sel.LineConfigName }
,                PortNum = sel.PortNum
,                PortState = sel.PortState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.PortNum
,                sel.PortState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.PortStateEventPriority()
                {
                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId, Name = (string)select.LineConfigName }
,                PortNum = select.PortNum
,                PortState = select.PortState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.ReaderState
,                sel.PortNum
,                sel.PortState
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                ReaderState = sel.ReaderState
,                PortNum = sel.PortNum
,                PortState = sel.PortState
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.ReaderState
,                sel.PortNum
,                sel.PortState
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                ReaderState = select.ReaderState
,                PortNum = select.PortNum
,                PortState = select.PortState
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.ReaderState
,                sel.PortNum
,                sel.PortState
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                ReaderState = sel.ReaderState
,                PortNum = sel.PortNum
,                PortState = sel.PortState
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId, Name = (string)sel.MobileRegDeviceName }
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.ReaderState
,                sel.PortNum
,                sel.PortState
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.ReaderStateControlByTransportEventPriority()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                ReaderState = select.ReaderState
,                PortNum = select.PortNum
,                PortState = select.PortState
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId, Name = (string)select.MobileRegDeviceName }
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SurveyState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent()
                {
                SurveyState = sel.SurveyState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SurveyState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.LineSurveyPriorityEvent()
                {
                SurveyState = select.SurveyState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SurveyState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent()
                {
                SurveyState = sel.SurveyState
,                StateEvent = sel.StateEvent
,                Priority = sel.Priority
,                Datetime = sel.Datetime
,                IsReset = sel.IsReset
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.SurveyState
,                sel.StateEvent
,                sel.Priority
,                sel.Datetime
,                sel.IsReset
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.PriorityEvent.StateEvents.Survey.SurveyPriorityEvent()
                {
                SurveyState = select.SurveyState
,                StateEvent = select.StateEvent
,                Priority = select.Priority
,                Datetime = select.Datetime
,                IsReset = select.IsReset
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.RfidType
,                sel.SubjectLabel
,                sel.SubjectType
,                sel.Antenna
,                sel.AnchorId
,                sel.Distance
,                sel.Reason
,                sel.Datetime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent()
                {
                Label = sel.Label
,                RfidType = sel.RfidType
,                SubjectLabel = sel.SubjectLabel
,                SubjectType = sel.SubjectType
,                Antenna = sel.Antenna
,                AnchorId = sel.AnchorId
,                Distance = sel.Distance
,                Reason = sel.Reason
,                Datetime = sel.Datetime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.RfidType
,                sel.SubjectLabel
,                sel.SubjectType
,                sel.Antenna
,                sel.AnchorId
,                sel.Distance
,                sel.Reason
,                sel.Datetime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent()
                {
                Label = select.Label
,                RfidType = select.RfidType
,                SubjectLabel = select.SubjectLabel
,                SubjectType = select.SubjectType
,                Antenna = select.Antenna
,                AnchorId = select.AnchorId
,                Distance = select.Distance
,                Reason = select.Reason
,                Datetime = select.Datetime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.RfidType
,                sel.SubjectLabel
,                sel.SubjectType
,                sel.Antenna
,                sel.AnchorId
,                sel.Distance
,                sel.Reason
,                sel.Datetime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent()
                {
                Label = sel.Label
,                RfidType = sel.RfidType
,                SubjectLabel = sel.SubjectLabel
,                SubjectType = sel.SubjectType
,                Antenna = sel.Antenna
,                AnchorId = sel.AnchorId
,                Distance = sel.Distance
,                Reason = sel.Reason
,                Datetime = sel.Datetime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.RfidType
,                sel.SubjectLabel
,                sel.SubjectType
,                sel.Antenna
,                sel.AnchorId
,                sel.Distance
,                sel.Reason
,                sel.Datetime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.DiscardedAccurateRfidEvent()
                {
                Label = select.Label
,                RfidType = select.RfidType
,                SubjectLabel = select.SubjectLabel
,                SubjectType = select.SubjectType
,                Antenna = select.Antenna
,                AnchorId = select.AnchorId
,                Distance = select.Distance
,                Reason = select.Reason
,                Datetime = select.Datetime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                MineId = sel.Mine == null ? (long?)null : sel.Mine.Id
,                sel.IsOwnerRoomLampControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom()
                {
                Number = sel.Number
,                Mine = sel.MineId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine { Id = (long)sel.MineId }
,                IsOwnerRoomLampControl = sel.IsOwnerRoomLampControl
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                MineId = sel.Mine == null ? (long?)null : sel.Mine.Id
,                sel.IsOwnerRoomLampControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom()
                {
                Number = select.Number
,                Mine = select.MineId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine { Id = (long)select.MineId }
,                IsOwnerRoomLampControl = select.IsOwnerRoomLampControl
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                MineId = sel.Mine == null ? (long?)null : sel.Mine.Id,
                MineName = sel.Mine == null ? (string)null : sel.Mine.Name
,                sel.IsOwnerRoomLampControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom()
                {
                Number = sel.Number
,                Mine = sel.MineId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine { Id = (long)sel.MineId, Name = (string)sel.MineName }
,                IsOwnerRoomLampControl = sel.IsOwnerRoomLampControl
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                MineId = sel.Mine == null ? (long?)null : sel.Mine.Id,
                MineName = sel.Mine == null ? (string)null : sel.Mine.Name
,                sel.IsOwnerRoomLampControl
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom()
                {
                Number = select.Number
,                Mine = select.MineId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine { Id = (long)select.MineId, Name = (string)select.MineName }
,                IsOwnerRoomLampControl = select.IsOwnerRoomLampControl
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.LineConfig> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Positioning.LineConfig> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.IsEnable
,                DAServerId = sel.DAServer == null ? (long?)null : sel.DAServer.Id
,                sel.LineType
,                sel.QueryTime
,                sel.CheckAntennaTime
,                sel.ReadRepeatCount
,                sel.ReadCycleCount
,                Port1Id = sel.Port1 == null ? (long?)null : sel.Port1.Id
,                Port2Id = sel.Port2 == null ? (long?)null : sel.Port2.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.LineConfig()
                {
                Number = sel.Number
,                IsEnable = sel.IsEnable
,                DAServer = sel.DAServerId == null? null : new Utis.Minex.ProductionModel.Common.DAServer { Id = (long)sel.DAServerId }
,                LineType = sel.LineType
,                QueryTime = sel.QueryTime
,                CheckAntennaTime = sel.CheckAntennaTime
,                ReadRepeatCount = sel.ReadRepeatCount
,                ReadCycleCount = sel.ReadCycleCount
,                Port1 = sel.Port1Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)sel.Port1Id }
,                Port2 = sel.Port2Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)sel.Port2Id }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.LineConfig FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Positioning.LineConfig> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.IsEnable
,                DAServerId = sel.DAServer == null ? (long?)null : sel.DAServer.Id
,                sel.LineType
,                sel.QueryTime
,                sel.CheckAntennaTime
,                sel.ReadRepeatCount
,                sel.ReadCycleCount
,                Port1Id = sel.Port1 == null ? (long?)null : sel.Port1.Id
,                Port2Id = sel.Port2 == null ? (long?)null : sel.Port2.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.LineConfig()
                {
                Number = select.Number
,                IsEnable = select.IsEnable
,                DAServer = select.DAServerId == null? null : new Utis.Minex.ProductionModel.Common.DAServer { Id = (long)select.DAServerId }
,                LineType = select.LineType
,                QueryTime = select.QueryTime
,                CheckAntennaTime = select.CheckAntennaTime
,                ReadRepeatCount = select.ReadRepeatCount
,                ReadCycleCount = select.ReadCycleCount
,                Port1 = select.Port1Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)select.Port1Id }
,                Port2 = select.Port2Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)select.Port2Id }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.LineConfig> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Positioning.LineConfig> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.IsEnable
,                DAServerId = sel.DAServer == null ? (long?)null : sel.DAServer.Id,
                DAServerName = sel.DAServer == null ? (string)null : sel.DAServer.Name
,                sel.LineType
,                sel.QueryTime
,                sel.CheckAntennaTime
,                sel.ReadRepeatCount
,                sel.ReadCycleCount
,                Port1Id = sel.Port1 == null ? (long?)null : sel.Port1.Id,
                Port1Name = sel.Port1 == null ? (string)null : sel.Port1.Name
,                Port2Id = sel.Port2 == null ? (long?)null : sel.Port2.Id,
                Port2Name = sel.Port2 == null ? (string)null : sel.Port2.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.LineConfig()
                {
                Number = sel.Number
,                IsEnable = sel.IsEnable
,                DAServer = sel.DAServerId == null? null : new Utis.Minex.ProductionModel.Common.DAServer { Id = (long)sel.DAServerId, Name = (string)sel.DAServerName }
,                LineType = sel.LineType
,                QueryTime = sel.QueryTime
,                CheckAntennaTime = sel.CheckAntennaTime
,                ReadRepeatCount = sel.ReadRepeatCount
,                ReadCycleCount = sel.ReadCycleCount
,                Port1 = sel.Port1Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)sel.Port1Id, Name = (string)sel.Port1Name }
,                Port2 = sel.Port2Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)sel.Port2Id, Name = (string)sel.Port2Name }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.LineConfig FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Positioning.LineConfig> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.IsEnable
,                DAServerId = sel.DAServer == null ? (long?)null : sel.DAServer.Id,
                DAServerName = sel.DAServer == null ? (string)null : sel.DAServer.Name
,                sel.LineType
,                sel.QueryTime
,                sel.CheckAntennaTime
,                sel.ReadRepeatCount
,                sel.ReadCycleCount
,                Port1Id = sel.Port1 == null ? (long?)null : sel.Port1.Id,
                Port1Name = sel.Port1 == null ? (string)null : sel.Port1.Name
,                Port2Id = sel.Port2 == null ? (long?)null : sel.Port2.Id,
                Port2Name = sel.Port2 == null ? (string)null : sel.Port2.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.LineConfig()
                {
                Number = select.Number
,                IsEnable = select.IsEnable
,                DAServer = select.DAServerId == null? null : new Utis.Minex.ProductionModel.Common.DAServer { Id = (long)select.DAServerId, Name = (string)select.DAServerName }
,                LineType = select.LineType
,                QueryTime = select.QueryTime
,                CheckAntennaTime = select.CheckAntennaTime
,                ReadRepeatCount = select.ReadRepeatCount
,                ReadCycleCount = select.ReadCycleCount
,                Port1 = select.Port1Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)select.Port1Id, Name = (string)select.Port1Name }
,                Port2 = select.Port2Id == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverterPort { Id = (long)select.Port2Id, Name = (string)select.Port2Name }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.PortSettings> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Positioning.PortSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PortType
,                sel.TimeOut1ByteMs
,                sel.TimeOutBytesMs
,                sel.ReOpenType
,                sel.BaudRate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.PortSettings()
                {
                PortType = sel.PortType
,                TimeOut1ByteMs = sel.TimeOut1ByteMs
,                TimeOutBytesMs = sel.TimeOutBytesMs
,                ReOpenType = sel.ReOpenType
,                BaudRate = sel.BaudRate
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.PortSettings FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Positioning.PortSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PortType
,                sel.TimeOut1ByteMs
,                sel.TimeOutBytesMs
,                sel.ReOpenType
,                sel.BaudRate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.PortSettings()
                {
                PortType = select.PortType
,                TimeOut1ByteMs = select.TimeOut1ByteMs
,                TimeOutBytesMs = select.TimeOutBytesMs
,                ReOpenType = select.ReOpenType
,                BaudRate = select.BaudRate
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.PortSettings> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Positioning.PortSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PortType
,                sel.TimeOut1ByteMs
,                sel.TimeOutBytesMs
,                sel.ReOpenType
,                sel.BaudRate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.PortSettings()
                {
                PortType = sel.PortType
,                TimeOut1ByteMs = sel.TimeOut1ByteMs
,                TimeOutBytesMs = sel.TimeOutBytesMs
,                ReOpenType = sel.ReOpenType
,                BaudRate = sel.BaudRate
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.PortSettings FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Positioning.PortSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.PortType
,                sel.TimeOut1ByteMs
,                sel.TimeOutBytesMs
,                sel.ReOpenType
,                sel.BaudRate
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.PortSettings()
                {
                PortType = select.PortType
,                TimeOut1ByteMs = select.TimeOut1ByteMs
,                TimeOutBytesMs = select.TimeOutBytesMs
,                ReOpenType = select.ReOpenType
,                BaudRate = select.BaudRate
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.SubjectsDistances> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Positioning.SubjectsDistances> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Distance
,                sel.MeasuringDistances
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.SubjectsDistances()
                {
                Distance = sel.Distance
,                MeasuringDistances = sel.MeasuringDistances
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.SubjectsDistances FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Positioning.SubjectsDistances> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Distance
,                sel.MeasuringDistances
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.SubjectsDistances()
                {
                Distance = select.Distance
,                MeasuringDistances = select.MeasuringDistances
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.Token> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Positioning.Token> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.X
,                sel.Y
,                sel.Z
,                sel.Sources
,                sel.Label
,                sel.DeviceType
,                sel.SchemeId
,                sel.Speed
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.Token()
                {
                X = sel.X
,                Y = sel.Y
,                Z = sel.Z
,                Sources = sel.Sources
,                Label = sel.Label
,                DeviceType = sel.DeviceType
,                SchemeId = sel.SchemeId
,                Speed = sel.Speed
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.Token FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Positioning.Token> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.X
,                sel.Y
,                sel.Z
,                sel.Sources
,                sel.Label
,                sel.DeviceType
,                sel.SchemeId
,                sel.Speed
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.Token()
                {
                X = select.X
,                Y = select.Y
,                Z = select.Z
,                Sources = select.Sources
,                Label = select.Label
,                DeviceType = select.DeviceType
,                SchemeId = select.SchemeId
,                Speed = select.Speed
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Positioning.Token> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Positioning.Token> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.X
,                sel.Y
,                sel.Z
,                sel.Sources
,                sel.Label
,                sel.DeviceType
,                sel.SchemeId
,                sel.Speed
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Positioning.Token()
                {
                X = sel.X
,                Y = sel.Y
,                Z = sel.Z
,                Sources = sel.Sources
,                Label = sel.Label
,                DeviceType = sel.DeviceType
,                SchemeId = sel.SchemeId
,                Speed = sel.Speed
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Positioning.Token FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Positioning.Token> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.X
,                sel.Y
,                sel.Z
,                sel.Sources
,                sel.Label
,                sel.DeviceType
,                sel.SchemeId
,                sel.Speed
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Positioning.Token()
                {
                X = select.X
,                Y = select.Y
,                Z = select.Z
,                Sources = select.Sources
,                Label = select.Label
,                DeviceType = select.DeviceType
,                SchemeId = select.SchemeId
,                Speed = select.Speed
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Notes.MarkPointParameters> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParameters> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.DistanceToCross1
,                sel.DistanceToCross2
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                MarkPointCurrentId = sel.MarkPointCurrent == null ? (long?)null : sel.MarkPointCurrent.Id
,                sel.FirmwareVersion
,                sel.MarkPointState
,                sel.MarkPointCondition
,                sel.MarkPointStateCurrent
,                sel.MarkPointConditionCurrent
,                sel.MarkPointOperationType
,                sel.RemainingBatteryInMinutes
,                sel.IsParametersReceived
,                sel.IsBatteryOk
,                sel.IsDistanceMeasurementOk
,                sel.IsMountingRegulationOk
,                WorkingOnCross1Id = sel.WorkingOnCross1 == null ? (long?)null : sel.WorkingOnCross1.Id
,                WorkingOnCross2Id = sel.WorkingOnCross2 == null ? (long?)null : sel.WorkingOnCross2.Id
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Notes.MarkPointParameters()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                DistanceToCross1 = sel.DistanceToCross1
,                DistanceToCross2 = sel.DistanceToCross2
,                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                MarkPointCurrent = sel.MarkPointCurrentId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointCurrentId }
,                FirmwareVersion = sel.FirmwareVersion
,                MarkPointState = sel.MarkPointState
,                MarkPointCondition = sel.MarkPointCondition
,                MarkPointStateCurrent = sel.MarkPointStateCurrent
,                MarkPointConditionCurrent = sel.MarkPointConditionCurrent
,                MarkPointOperationType = sel.MarkPointOperationType
,                RemainingBatteryInMinutes = sel.RemainingBatteryInMinutes
,                IsParametersReceived = sel.IsParametersReceived
,                IsBatteryOk = sel.IsBatteryOk
,                IsDistanceMeasurementOk = sel.IsDistanceMeasurementOk
,                IsMountingRegulationOk = sel.IsMountingRegulationOk
,                WorkingOnCross1 = sel.WorkingOnCross1Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOnCross1Id }
,                WorkingOnCross2 = sel.WorkingOnCross2Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOnCross2Id }
,                Description = sel.Description
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Notes.MarkPointParameters FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParameters> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.DistanceToCross1
,                sel.DistanceToCross2
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                MarkPointCurrentId = sel.MarkPointCurrent == null ? (long?)null : sel.MarkPointCurrent.Id
,                sel.FirmwareVersion
,                sel.MarkPointState
,                sel.MarkPointCondition
,                sel.MarkPointStateCurrent
,                sel.MarkPointConditionCurrent
,                sel.MarkPointOperationType
,                sel.RemainingBatteryInMinutes
,                sel.IsParametersReceived
,                sel.IsBatteryOk
,                sel.IsDistanceMeasurementOk
,                sel.IsMountingRegulationOk
,                WorkingOnCross1Id = sel.WorkingOnCross1 == null ? (long?)null : sel.WorkingOnCross1.Id
,                WorkingOnCross2Id = sel.WorkingOnCross2 == null ? (long?)null : sel.WorkingOnCross2.Id
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Notes.MarkPointParameters()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                DistanceToCross1 = select.DistanceToCross1
,                DistanceToCross2 = select.DistanceToCross2
,                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                MarkPointCurrent = select.MarkPointCurrentId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointCurrentId }
,                FirmwareVersion = select.FirmwareVersion
,                MarkPointState = select.MarkPointState
,                MarkPointCondition = select.MarkPointCondition
,                MarkPointStateCurrent = select.MarkPointStateCurrent
,                MarkPointConditionCurrent = select.MarkPointConditionCurrent
,                MarkPointOperationType = select.MarkPointOperationType
,                RemainingBatteryInMinutes = select.RemainingBatteryInMinutes
,                IsParametersReceived = select.IsParametersReceived
,                IsBatteryOk = select.IsBatteryOk
,                IsDistanceMeasurementOk = select.IsDistanceMeasurementOk
,                IsMountingRegulationOk = select.IsMountingRegulationOk
,                WorkingOnCross1 = select.WorkingOnCross1Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOnCross1Id }
,                WorkingOnCross2 = select.WorkingOnCross2Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOnCross2Id }
,                Description = select.Description
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Notes.MarkPointParameters> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParameters> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.DistanceToCross1
,                sel.DistanceToCross2
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                MarkPointCurrentId = sel.MarkPointCurrent == null ? (long?)null : sel.MarkPointCurrent.Id,
                MarkPointCurrentName = sel.MarkPointCurrent == null ? (string)null : sel.MarkPointCurrent.Name
,                sel.FirmwareVersion
,                sel.MarkPointState
,                sel.MarkPointCondition
,                sel.MarkPointStateCurrent
,                sel.MarkPointConditionCurrent
,                sel.MarkPointOperationType
,                sel.RemainingBatteryInMinutes
,                sel.IsParametersReceived
,                sel.IsBatteryOk
,                sel.IsDistanceMeasurementOk
,                sel.IsMountingRegulationOk
,                WorkingOnCross1Id = sel.WorkingOnCross1 == null ? (long?)null : sel.WorkingOnCross1.Id,
                WorkingOnCross1Name = sel.WorkingOnCross1 == null ? (string)null : sel.WorkingOnCross1.Name
,                WorkingOnCross2Id = sel.WorkingOnCross2 == null ? (long?)null : sel.WorkingOnCross2.Id,
                WorkingOnCross2Name = sel.WorkingOnCross2 == null ? (string)null : sel.WorkingOnCross2.Name
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Notes.MarkPointParameters()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                DistanceToCross1 = sel.DistanceToCross1
,                DistanceToCross2 = sel.DistanceToCross2
,                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                MarkPointCurrent = sel.MarkPointCurrentId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointCurrentId, Name = (string)sel.MarkPointCurrentName }
,                FirmwareVersion = sel.FirmwareVersion
,                MarkPointState = sel.MarkPointState
,                MarkPointCondition = sel.MarkPointCondition
,                MarkPointStateCurrent = sel.MarkPointStateCurrent
,                MarkPointConditionCurrent = sel.MarkPointConditionCurrent
,                MarkPointOperationType = sel.MarkPointOperationType
,                RemainingBatteryInMinutes = sel.RemainingBatteryInMinutes
,                IsParametersReceived = sel.IsParametersReceived
,                IsBatteryOk = sel.IsBatteryOk
,                IsDistanceMeasurementOk = sel.IsDistanceMeasurementOk
,                IsMountingRegulationOk = sel.IsMountingRegulationOk
,                WorkingOnCross1 = sel.WorkingOnCross1Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOnCross1Id, Name = (string)sel.WorkingOnCross1Name }
,                WorkingOnCross2 = sel.WorkingOnCross2Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOnCross2Id, Name = (string)sel.WorkingOnCross2Name }
,                Description = sel.Description
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Notes.MarkPointParameters FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParameters> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.DistanceToCross1
,                sel.DistanceToCross2
,                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                MarkPointCurrentId = sel.MarkPointCurrent == null ? (long?)null : sel.MarkPointCurrent.Id,
                MarkPointCurrentName = sel.MarkPointCurrent == null ? (string)null : sel.MarkPointCurrent.Name
,                sel.FirmwareVersion
,                sel.MarkPointState
,                sel.MarkPointCondition
,                sel.MarkPointStateCurrent
,                sel.MarkPointConditionCurrent
,                sel.MarkPointOperationType
,                sel.RemainingBatteryInMinutes
,                sel.IsParametersReceived
,                sel.IsBatteryOk
,                sel.IsDistanceMeasurementOk
,                sel.IsMountingRegulationOk
,                WorkingOnCross1Id = sel.WorkingOnCross1 == null ? (long?)null : sel.WorkingOnCross1.Id,
                WorkingOnCross1Name = sel.WorkingOnCross1 == null ? (string)null : sel.WorkingOnCross1.Name
,                WorkingOnCross2Id = sel.WorkingOnCross2 == null ? (long?)null : sel.WorkingOnCross2.Id,
                WorkingOnCross2Name = sel.WorkingOnCross2 == null ? (string)null : sel.WorkingOnCross2.Name
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Notes.MarkPointParameters()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                DistanceToCross1 = select.DistanceToCross1
,                DistanceToCross2 = select.DistanceToCross2
,                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                MarkPointCurrent = select.MarkPointCurrentId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointCurrentId, Name = (string)select.MarkPointCurrentName }
,                FirmwareVersion = select.FirmwareVersion
,                MarkPointState = select.MarkPointState
,                MarkPointCondition = select.MarkPointCondition
,                MarkPointStateCurrent = select.MarkPointStateCurrent
,                MarkPointConditionCurrent = select.MarkPointConditionCurrent
,                MarkPointOperationType = select.MarkPointOperationType
,                RemainingBatteryInMinutes = select.RemainingBatteryInMinutes
,                IsParametersReceived = select.IsParametersReceived
,                IsBatteryOk = select.IsBatteryOk
,                IsDistanceMeasurementOk = select.IsDistanceMeasurementOk
,                IsMountingRegulationOk = select.IsMountingRegulationOk
,                WorkingOnCross1 = select.WorkingOnCross1Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOnCross1Id, Name = (string)select.WorkingOnCross1Name }
,                WorkingOnCross2 = select.WorkingOnCross2Id == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOnCross2Id, Name = (string)select.WorkingOnCross2Name }
,                Description = select.Description
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointParametrsId = sel.MarkPointParametrs == null ? (long?)null : sel.MarkPointParametrs.Id
,                sel.Data
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw()
                {
                MarkPointParametrs = sel.MarkPointParametrsId == null? null : new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw { Id = (long)sel.MarkPointParametrsId }
,                Data = sel.Data
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointParametrsId = sel.MarkPointParametrs == null ? (long?)null : sel.MarkPointParametrs.Id
,                sel.Data
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw()
                {
                MarkPointParametrs = select.MarkPointParametrsId == null? null : new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw { Id = (long)select.MarkPointParametrsId }
,                Data = select.Data
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointParametrsId = sel.MarkPointParametrs == null ? (long?)null : sel.MarkPointParametrs.Id,
                MarkPointParametrsName = sel.MarkPointParametrs == null ? (string)null : sel.MarkPointParametrs.Name
,                sel.Data
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw()
                {
                MarkPointParametrs = sel.MarkPointParametrsId == null? null : new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw { Id = (long)sel.MarkPointParametrsId, Name = (string)sel.MarkPointParametrsName }
,                Data = sel.Data
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointParametrsId = sel.MarkPointParametrs == null ? (long?)null : sel.MarkPointParametrs.Id,
                MarkPointParametrsName = sel.MarkPointParametrs == null ? (string)null : sel.MarkPointParametrs.Name
,                sel.Data
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw()
                {
                MarkPointParametrs = select.MarkPointParametrsId == null? null : new Utis.Minex.ProductionModel.Notes.MarkPointParametrsRaw { Id = (long)select.MarkPointParametrsId, Name = (string)select.MarkPointParametrsName }
,                Data = select.Data
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MobileDevice.MobileUser> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MobileDevice.MobileUser> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MobileDevice.MobileUser()
                {
                Password = sel.Password
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MobileDevice.MobileUser FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MobileDevice.MobileUser> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MobileDevice.MobileUser()
                {
                Password = select.Password
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MobileDevice.MobileUser> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MobileDevice.MobileUser> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MobileDevice.MobileUser()
                {
                Password = sel.Password
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MobileDevice.MobileUser FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MobileDevice.MobileUser> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Password
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MobileDevice.MobileUser()
                {
                Password = select.Password
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.TransitionZone> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.TransitionZone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JoinedMineId = sel.JoinedMine == null ? (long?)null : sel.JoinedMine.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.TransitionZone()
                {
                JoinedMine = sel.JoinedMineId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine { Id = (long)sel.JoinedMineId }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.TransitionZone FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.MineSpace.TransitionZone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JoinedMineId = sel.JoinedMine == null ? (long?)null : sel.JoinedMine.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.TransitionZone()
                {
                JoinedMine = select.JoinedMineId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine { Id = (long)select.JoinedMineId }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.TransitionZone> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.TransitionZone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JoinedMineId = sel.JoinedMine == null ? (long?)null : sel.JoinedMine.Id,
                JoinedMineName = sel.JoinedMine == null ? (string)null : sel.JoinedMine.Name
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.TransitionZone()
                {
                JoinedMine = sel.JoinedMineId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine { Id = (long)sel.JoinedMineId, Name = (string)sel.JoinedMineName }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId, Name = (string)sel.ZoneName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.TransitionZone FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.MineSpace.TransitionZone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JoinedMineId = sel.JoinedMine == null ? (long?)null : sel.JoinedMine.Id,
                JoinedMineName = sel.JoinedMine == null ? (string)null : sel.JoinedMine.Name
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.TransitionZone()
                {
                JoinedMine = select.JoinedMineId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine { Id = (long)select.JoinedMineId, Name = (string)select.JoinedMineName }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId, Name = (string)select.ZoneName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.Zone> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.Zone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Description
,                sel.IsLocal
,                sel.InsideArea
,                ParentZoneId = sel.ParentZone == null ? (long?)null : sel.ParentZone.Id
,                sel.IsZonalPositioning
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.Zone()
                {
                Description = sel.Description
,                IsLocal = sel.IsLocal
,                InsideArea = sel.InsideArea
,                ParentZone = sel.ParentZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ParentZoneId }
,                IsZonalPositioning = sel.IsZonalPositioning
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.Zone FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.MineSpace.Zone> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Description
,                sel.IsLocal
,                sel.InsideArea
,                ParentZoneId = sel.ParentZone == null ? (long?)null : sel.ParentZone.Id
,                sel.IsZonalPositioning
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.Zone()
                {
                Description = select.Description
,                IsLocal = select.IsLocal
,                InsideArea = select.InsideArea
,                ParentZone = select.ParentZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ParentZoneId }
,                IsZonalPositioning = select.IsZonalPositioning
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.HorizonType
,                sel.IsMine
,                sel.Level
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon()
                {
                HorizonType = sel.HorizonType
,                IsMine = sel.IsMine
,                Level = sel.Level
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.HorizonType
,                sel.IsMine
,                sel.Level
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon()
                {
                HorizonType = select.HorizonType
,                IsMine = select.IsMine
,                Level = select.Level
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.MineModel.Mine> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Mine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Horizons
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine()
                {
                Horizons = sel.Horizons
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.MineModel.Mine FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Mine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Horizons
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.MineModel.Mine()
                {
                Horizons = select.Horizons
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.MineSpace.MineModel.Working> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Working> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MineType
,                sel.BeginDate
,                sel.EndDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.MineSpace.MineModel.Working()
                {
                MineType = sel.MineType
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.MineSpace.MineModel.Working FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.MineSpace.MineModel.Working> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MineType
,                sel.BeginDate
,                sel.EndDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.MineSpace.MineModel.Working()
                {
                MineType = select.MineType
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DateTime
,                sel.UserName
,                UserPersonId = sel.UserPerson == null ? (long?)null : sel.UserPerson.Id
,                sel.UserRoleName
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                RfUnitId = sel.RfUnit == null ? (long?)null : sel.RfUnit.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.AckNotInMine
,                sel.AckLampReturn
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting()
                {
                DateTime = sel.DateTime
,                UserName = sel.UserName
,                UserPerson = sel.UserPersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.UserPersonId }
,                UserRoleName = sel.UserRoleName
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                RfUnit = sel.RfUnitId == null? null : new Utis.Minex.ProductionModel.Devices.RFUnit { Id = (long)sel.RfUnitId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                AckNotInMine = sel.AckNotInMine
,                AckLampReturn = sel.AckLampReturn
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DateTime
,                sel.UserName
,                UserPersonId = sel.UserPerson == null ? (long?)null : sel.UserPerson.Id
,                sel.UserRoleName
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                RfUnitId = sel.RfUnit == null ? (long?)null : sel.RfUnit.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.AckNotInMine
,                sel.AckLampReturn
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting()
                {
                DateTime = select.DateTime
,                UserName = select.UserName
,                UserPerson = select.UserPersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.UserPersonId }
,                UserRoleName = select.UserRoleName
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                RfUnit = select.RfUnitId == null? null : new Utis.Minex.ProductionModel.Devices.RFUnit { Id = (long)select.RfUnitId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                AckNotInMine = select.AckNotInMine
,                AckLampReturn = select.AckLampReturn
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DateTime
,                sel.UserName
,                UserPersonId = sel.UserPerson == null ? (long?)null : sel.UserPerson.Id,
                UserPersonName = sel.UserPerson == null ? (string)null : sel.UserPerson.Name
,                sel.UserRoleName
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                RfUnitId = sel.RfUnit == null ? (long?)null : sel.RfUnit.Id,
                RfUnitName = sel.RfUnit == null ? (string)null : sel.RfUnit.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.AckNotInMine
,                sel.AckLampReturn
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting()
                {
                DateTime = sel.DateTime
,                UserName = sel.UserName
,                UserPerson = sel.UserPersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.UserPersonId, Name = (string)sel.UserPersonName }
,                UserRoleName = sel.UserRoleName
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                RfUnit = sel.RfUnitId == null? null : new Utis.Minex.ProductionModel.Devices.RFUnit { Id = (long)sel.RfUnitId, Name = (string)sel.RfUnitName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                AckNotInMine = sel.AckNotInMine
,                AckLampReturn = sel.AckLampReturn
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DateTime
,                sel.UserName
,                UserPersonId = sel.UserPerson == null ? (long?)null : sel.UserPerson.Id,
                UserPersonName = sel.UserPerson == null ? (string)null : sel.UserPerson.Name
,                sel.UserRoleName
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                RfUnitId = sel.RfUnit == null ? (long?)null : sel.RfUnit.Id,
                RfUnitName = sel.RfUnit == null ? (string)null : sel.RfUnit.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.AckNotInMine
,                sel.AckLampReturn
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.LoggingOfUserActions.NoteManualLifting()
                {
                DateTime = select.DateTime
,                UserName = select.UserName
,                UserPerson = select.UserPersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.UserPersonId, Name = (string)select.UserPersonName }
,                UserRoleName = select.UserRoleName
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                RfUnit = select.RfUnitId == null? null : new Utis.Minex.ProductionModel.Devices.RFUnit { Id = (long)select.RfUnitId, Name = (string)select.RfUnitName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                AckNotInMine = select.AckNotInMine
,                AckLampReturn = select.AckLampReturn
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.ListRankType
,                sel.Direction
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.AnticollisionJournal()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                ListRankType = sel.ListRankType
,                Direction = sel.Direction
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.AnticollisionJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                sel.ListRankType
,                sel.Direction
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.AnticollisionJournal()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                ListRankType = select.ListRankType
,                Direction = select.Direction
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.ListRankType
,                sel.Direction
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.AnticollisionJournal()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId, Name = (string)sel.MobileRegDeviceName }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                ListRankType = sel.ListRankType
,                Direction = sel.Direction
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.AnticollisionJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.AnticollisionJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                sel.ListRankType
,                sel.Direction
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.AnticollisionJournal()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId, Name = (string)select.MobileRegDeviceName }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                ListRankType = select.ListRankType
,                Direction = select.Direction
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.Downtime> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.Downtime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReasonDowntimeId = sel.ReasonDowntime == null ? (long?)null : sel.ReasonDowntime.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                PersonSetBeginId = sel.PersonSetBegin == null ? (long?)null : sel.PersonSetBegin.Id
,                PersonSetReasonId = sel.PersonSetReason == null ? (long?)null : sel.PersonSetReason.Id
,                PersonSetEndId = sel.PersonSetEnd == null ? (long?)null : sel.PersonSetEnd.Id
,                sel.DowntimeDetail
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.Downtime()
                {
                ReasonDowntime = sel.ReasonDowntimeId == null? null : new Utis.Minex.ProductionModel.Catalog.ReasonDowntime { Id = (long)sel.ReasonDowntimeId }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                PersonSetBegin = sel.PersonSetBeginId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBeginId }
,                PersonSetReason = sel.PersonSetReasonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetReasonId }
,                PersonSetEnd = sel.PersonSetEndId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetEndId }
,                DowntimeDetail = sel.DowntimeDetail
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.Downtime FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.Downtime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReasonDowntimeId = sel.ReasonDowntime == null ? (long?)null : sel.ReasonDowntime.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                PersonSetBeginId = sel.PersonSetBegin == null ? (long?)null : sel.PersonSetBegin.Id
,                PersonSetReasonId = sel.PersonSetReason == null ? (long?)null : sel.PersonSetReason.Id
,                PersonSetEndId = sel.PersonSetEnd == null ? (long?)null : sel.PersonSetEnd.Id
,                sel.DowntimeDetail
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.Downtime()
                {
                ReasonDowntime = select.ReasonDowntimeId == null? null : new Utis.Minex.ProductionModel.Catalog.ReasonDowntime { Id = (long)select.ReasonDowntimeId }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                PersonSetBegin = select.PersonSetBeginId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBeginId }
,                PersonSetReason = select.PersonSetReasonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetReasonId }
,                PersonSetEnd = select.PersonSetEndId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetEndId }
,                DowntimeDetail = select.DowntimeDetail
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.Downtime> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.Downtime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReasonDowntimeId = sel.ReasonDowntime == null ? (long?)null : sel.ReasonDowntime.Id,
                ReasonDowntimeName = sel.ReasonDowntime == null ? (string)null : sel.ReasonDowntime.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                PersonSetBeginId = sel.PersonSetBegin == null ? (long?)null : sel.PersonSetBegin.Id,
                PersonSetBeginName = sel.PersonSetBegin == null ? (string)null : sel.PersonSetBegin.Name
,                PersonSetReasonId = sel.PersonSetReason == null ? (long?)null : sel.PersonSetReason.Id,
                PersonSetReasonName = sel.PersonSetReason == null ? (string)null : sel.PersonSetReason.Name
,                PersonSetEndId = sel.PersonSetEnd == null ? (long?)null : sel.PersonSetEnd.Id,
                PersonSetEndName = sel.PersonSetEnd == null ? (string)null : sel.PersonSetEnd.Name
,                sel.DowntimeDetail
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.Downtime()
                {
                ReasonDowntime = sel.ReasonDowntimeId == null? null : new Utis.Minex.ProductionModel.Catalog.ReasonDowntime { Id = (long)sel.ReasonDowntimeId, Name = (string)sel.ReasonDowntimeName }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                PersonSetBegin = sel.PersonSetBeginId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBeginId, Name = (string)sel.PersonSetBeginName }
,                PersonSetReason = sel.PersonSetReasonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetReasonId, Name = (string)sel.PersonSetReasonName }
,                PersonSetEnd = sel.PersonSetEndId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetEndId, Name = (string)sel.PersonSetEndName }
,                DowntimeDetail = sel.DowntimeDetail
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.Downtime FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.Downtime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReasonDowntimeId = sel.ReasonDowntime == null ? (long?)null : sel.ReasonDowntime.Id,
                ReasonDowntimeName = sel.ReasonDowntime == null ? (string)null : sel.ReasonDowntime.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                PersonSetBeginId = sel.PersonSetBegin == null ? (long?)null : sel.PersonSetBegin.Id,
                PersonSetBeginName = sel.PersonSetBegin == null ? (string)null : sel.PersonSetBegin.Name
,                PersonSetReasonId = sel.PersonSetReason == null ? (long?)null : sel.PersonSetReason.Id,
                PersonSetReasonName = sel.PersonSetReason == null ? (string)null : sel.PersonSetReason.Name
,                PersonSetEndId = sel.PersonSetEnd == null ? (long?)null : sel.PersonSetEnd.Id,
                PersonSetEndName = sel.PersonSetEnd == null ? (string)null : sel.PersonSetEnd.Name
,                sel.DowntimeDetail
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.Downtime()
                {
                ReasonDowntime = select.ReasonDowntimeId == null? null : new Utis.Minex.ProductionModel.Catalog.ReasonDowntime { Id = (long)select.ReasonDowntimeId, Name = (string)select.ReasonDowntimeName }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                PersonSetBegin = select.PersonSetBeginId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBeginId, Name = (string)select.PersonSetBeginName }
,                PersonSetReason = select.PersonSetReasonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetReasonId, Name = (string)select.PersonSetReasonName }
,                PersonSetEnd = select.PersonSetEndId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetEndId, Name = (string)select.PersonSetEndName }
,                DowntimeDetail = select.DowntimeDetail
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal()
                {
                GasAnalyzer = sel.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)sel.GasAnalyzerId }
,                PersonSetBind = sel.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBindId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal()
                {
                GasAnalyzer = select.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)select.GasAnalyzerId }
,                PersonSetBind = select.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBindId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id,
                GasAnalyzerName = sel.GasAnalyzer == null ? (string)null : sel.GasAnalyzer.Name
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id,
                PersonSetBindName = sel.PersonSetBind == null ? (string)null : sel.PersonSetBind.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal()
                {
                GasAnalyzer = sel.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)sel.GasAnalyzerId, Name = (string)sel.GasAnalyzerName }
,                PersonSetBind = sel.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBindId, Name = (string)sel.PersonSetBindName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                GasAnalyzerId = sel.GasAnalyzer == null ? (long?)null : sel.GasAnalyzer.Id,
                GasAnalyzerName = sel.GasAnalyzer == null ? (string)null : sel.GasAnalyzer.Name
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id,
                PersonSetBindName = sel.PersonSetBind == null ? (string)null : sel.PersonSetBind.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.GasAnalyzerBindJournal()
                {
                GasAnalyzer = select.GasAnalyzerId == null? null : new Utis.Minex.ProductionModel.Devices.GasAnalyzer { Id = (long)select.GasAnalyzerId, Name = (string)select.GasAnalyzerName }
,                PersonSetBind = select.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBindId, Name = (string)select.PersonSetBindName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Reason
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                IndividualDeviceIssueState = sel.IndividualDeviceIssueState
,                CardNumber = sel.CardNumber
,                Reason = sel.Reason
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Reason
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                IndividualDeviceIssueState = select.IndividualDeviceIssueState
,                CardNumber = select.CardNumber
,                Reason = select.Reason
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Reason
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal()
                {
                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                IndividualDeviceIssueState = sel.IndividualDeviceIssueState
,                CardNumber = sel.CardNumber
,                Reason = sel.Reason
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IndividualDeviceIssueState
,                sel.CardNumber
,                sel.Reason
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.IndividualDeviceFailedJournal()
                {
                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                IndividualDeviceIssueState = select.IndividualDeviceIssueState
,                CardNumber = select.CardNumber
,                Reason = select.Reason
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.PlaceType
,                sel.Workings
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                PlaceType = sel.PlaceType
,                Workings = sel.Workings
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                sel.PlaceType
,                sel.Workings
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                PlaceType = select.PlaceType
,                Workings = select.Workings
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.PlaceType
,                sel.Workings
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                PlaceType = sel.PlaceType
,                Workings = sel.Workings
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                sel.PlaceType
,                sel.Workings
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                PlaceType = select.PlaceType
,                Workings = select.Workings
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.DeviceState
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId }
,                DeviceState = sel.DeviceState
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id
,                sel.DeviceState
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId }
,                DeviceState = select.DeviceState
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.DeviceState
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal()
                {
                MobileRegDevice = sel.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)sel.MobileRegDeviceId, Name = (string)sel.MobileRegDeviceName }
,                DeviceState = sel.DeviceState
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MobileRegDeviceId = sel.MobileRegDevice == null ? (long?)null : sel.MobileRegDevice.Id,
                MobileRegDeviceName = sel.MobileRegDevice == null ? (string)null : sel.MobileRegDevice.Name
,                sel.DeviceState
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.MobileRegDeviceOfflineJournal()
                {
                MobileRegDevice = select.MobileRegDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.MobileRegDevice { Id = (long)select.MobileRegDeviceId, Name = (string)select.MobileRegDeviceName }
,                DeviceState = select.DeviceState
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.PersonBindType
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.PersonBindJournalBase()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                PersonBindType = sel.PersonBindType
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.PersonBindJournalBase FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.PersonBindType
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.PersonBindJournalBase()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                PersonBindType = select.PersonBindType
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.PersonBindType
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.PersonBindJournalBase()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                PersonBindType = sel.PersonBindType
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.PersonBindJournalBase FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.PersonBindJournalBase> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.PersonBindType
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.PersonBindJournalBase()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                PersonBindType = select.PersonBindType
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.RadioBindJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.RadioBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.RadioBindJournal()
                {
                Radio = sel.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)sel.RadioId }
,                PersonSetBind = sel.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBindId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.RadioBindJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.RadioBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.RadioBindJournal()
                {
                Radio = select.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)select.RadioId }
,                PersonSetBind = select.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBindId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.RadioBindJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.RadioBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id,
                RadioName = sel.Radio == null ? (string)null : sel.Radio.Name
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id,
                PersonSetBindName = sel.PersonSetBind == null ? (string)null : sel.PersonSetBind.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.RadioBindJournal()
                {
                Radio = sel.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)sel.RadioId, Name = (string)sel.RadioName }
,                PersonSetBind = sel.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonSetBindId, Name = (string)sel.PersonSetBindName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.RadioBindJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.RadioBindJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RadioId = sel.Radio == null ? (long?)null : sel.Radio.Id,
                RadioName = sel.Radio == null ? (string)null : sel.Radio.Name
,                PersonSetBindId = sel.PersonSetBind == null ? (long?)null : sel.PersonSetBind.Id,
                PersonSetBindName = sel.PersonSetBind == null ? (string)null : sel.PersonSetBind.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.RadioBindJournal()
                {
                Radio = select.RadioId == null? null : new Utis.Minex.ProductionModel.Devices.Radio { Id = (long)select.RadioId, Name = (string)select.RadioName }
,                PersonSetBind = select.PersonSetBindId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonSetBindId, Name = (string)select.PersonSetBindName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Readers
,                sel.PortStateId
,                sel.LineStateId
,                sel.LineSurveyId
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ReadersToLineEvents()
                {
                Readers = sel.Readers
,                PortStateId = sel.PortStateId
,                LineStateId = sel.LineStateId
,                LineSurveyId = sel.LineSurveyId
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ReadersToLineEvents FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Readers
,                sel.PortStateId
,                sel.LineStateId
,                sel.LineSurveyId
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ReadersToLineEvents()
                {
                Readers = select.Readers
,                PortStateId = select.PortStateId
,                LineStateId = select.LineStateId
,                LineSurveyId = select.LineSurveyId
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Readers
,                sel.PortStateId
,                sel.LineStateId
,                sel.LineSurveyId
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ReadersToLineEvents()
                {
                Readers = sel.Readers
,                PortStateId = sel.PortStateId
,                LineStateId = sel.LineStateId
,                LineSurveyId = sel.LineSurveyId
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ReadersToLineEvents FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ReadersToLineEvents> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Readers
,                sel.PortStateId
,                sel.LineStateId
,                sel.LineSurveyId
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ReadersToLineEvents()
                {
                Readers = select.Readers
,                PortStateId = select.PortStateId
,                LineStateId = select.LineStateId
,                LineSurveyId = select.LineSurveyId
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ShiftId = sel.Shift == null ? (long?)null : sel.Shift.Id
,                sel.ShiftBegin
,                sel.ShiftEnd
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.ViolationType
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ShiftViolationJournal()
                {
                Shift = sel.ShiftId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Shift { Id = (long)sel.ShiftId }
,                ShiftBegin = sel.ShiftBegin
,                ShiftEnd = sel.ShiftEnd
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId }
,                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                ViolationType = sel.ViolationType
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ShiftViolationJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ShiftId = sel.Shift == null ? (long?)null : sel.Shift.Id
,                sel.ShiftBegin
,                sel.ShiftEnd
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id
,                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.ViolationType
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ShiftViolationJournal()
                {
                Shift = select.ShiftId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Shift { Id = (long)select.ShiftId }
,                ShiftBegin = select.ShiftBegin
,                ShiftEnd = select.ShiftEnd
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId }
,                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                ViolationType = select.ViolationType
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ShiftId = sel.Shift == null ? (long?)null : sel.Shift.Id,
                ShiftName = sel.Shift == null ? (string)null : sel.Shift.Name
,                sel.ShiftBegin
,                sel.ShiftEnd
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.ViolationType
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ShiftViolationJournal()
                {
                Shift = sel.ShiftId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Shift { Id = (long)sel.ShiftId, Name = (string)sel.ShiftName }
,                ShiftBegin = sel.ShiftBegin
,                ShiftEnd = sel.ShiftEnd
,                IndividualDevice = sel.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)sel.IndividualDeviceId, Name = (string)sel.IndividualDeviceName }
,                Lamp = sel.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)sel.LampId, Name = (string)sel.LampName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                ViolationType = sel.ViolationType
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ShiftViolationJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ShiftViolationJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ShiftId = sel.Shift == null ? (long?)null : sel.Shift.Id,
                ShiftName = sel.Shift == null ? (string)null : sel.Shift.Name
,                sel.ShiftBegin
,                sel.ShiftEnd
,                IndividualDeviceId = sel.IndividualDevice == null ? (long?)null : sel.IndividualDevice.Id,
                IndividualDeviceName = sel.IndividualDevice == null ? (string)null : sel.IndividualDevice.Name
,                LampId = sel.Lamp == null ? (long?)null : sel.Lamp.Id,
                LampName = sel.Lamp == null ? (string)null : sel.Lamp.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.ViolationType
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ShiftViolationJournal()
                {
                Shift = select.ShiftId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Shift { Id = (long)select.ShiftId, Name = (string)select.ShiftName }
,                ShiftBegin = select.ShiftBegin
,                ShiftEnd = select.ShiftEnd
,                IndividualDevice = select.IndividualDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.IndividualDevice { Id = (long)select.IndividualDeviceId, Name = (string)select.IndividualDeviceName }
,                Lamp = select.LampId == null? null : new Utis.Minex.ProductionModel.Devices.Lamp { Id = (long)select.LampId, Name = (string)select.LampName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                ViolationType = select.ViolationType
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.TrainJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.TrainJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                RailCarTypeId = sel.RailCarType == null ? (long?)null : sel.RailCarType.Id
,                sel.RailCarCount
,                sel.Lenght
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.TrainJournal()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                RailCarType = sel.RailCarTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.RailCarType { Id = (long)sel.RailCarTypeId }
,                RailCarCount = sel.RailCarCount
,                Lenght = sel.Lenght
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.TrainJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.TrainJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                RailCarTypeId = sel.RailCarType == null ? (long?)null : sel.RailCarType.Id
,                sel.RailCarCount
,                sel.Lenght
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.TrainJournal()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                RailCarType = select.RailCarTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.RailCarType { Id = (long)select.RailCarTypeId }
,                RailCarCount = select.RailCarCount
,                Lenght = select.Lenght
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.TrainJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.TrainJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                RailCarTypeId = sel.RailCarType == null ? (long?)null : sel.RailCarType.Id,
                RailCarTypeName = sel.RailCarType == null ? (string)null : sel.RailCarType.Name
,                sel.RailCarCount
,                sel.Lenght
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.TrainJournal()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                RailCarType = sel.RailCarTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.RailCarType { Id = (long)sel.RailCarTypeId, Name = (string)sel.RailCarTypeName }
,                RailCarCount = sel.RailCarCount
,                Lenght = sel.Lenght
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.TrainJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.TrainJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                RailCarTypeId = sel.RailCarType == null ? (long?)null : sel.RailCarType.Id,
                RailCarTypeName = sel.RailCarType == null ? (string)null : sel.RailCarType.Name
,                sel.RailCarCount
,                sel.Lenght
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.TrainJournal()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                RailCarType = select.RailCarTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.RailCarType { Id = (long)select.RailCarTypeId, Name = (string)select.RailCarTypeName }
,                RailCarCount = select.RailCarCount
,                Lenght = select.Lenght
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.DeviceType
,                HorizonOutId = sel.HorizonOut == null ? (long?)null : sel.HorizonOut.Id
,                WorkingOutId = sel.WorkingOut == null ? (long?)null : sel.WorkingOut.Id
,                sel.WorkingOutLenght
,                sel.WorkingOutDeadEnd
,                ZoneOutId = sel.ZoneOut == null ? (long?)null : sel.ZoneOut.Id
,                sel.LastFixationOnWorkingOut
,                HorizonInId = sel.HorizonIn == null ? (long?)null : sel.HorizonIn.Id
,                WorkingInId = sel.WorkingIn == null ? (long?)null : sel.WorkingIn.Id
,                sel.WorkingInLenght
,                sel.WorkingInDeadEnd
,                ZoneInId = sel.ZoneIn == null ? (long?)null : sel.ZoneIn.Id
,                sel.InTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal()
                {
                Label = sel.Label
,                DeviceType = sel.DeviceType
,                HorizonOut = sel.HorizonOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonOutId }
,                WorkingOut = sel.WorkingOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOutId }
,                WorkingOutLenght = sel.WorkingOutLenght
,                WorkingOutDeadEnd = sel.WorkingOutDeadEnd
,                ZoneOut = sel.ZoneOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneOutId }
,                LastFixationOnWorkingOut = sel.LastFixationOnWorkingOut
,                HorizonIn = sel.HorizonInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonInId }
,                WorkingIn = sel.WorkingInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingInId }
,                WorkingInLenght = sel.WorkingInLenght
,                WorkingInDeadEnd = sel.WorkingInDeadEnd
,                ZoneIn = sel.ZoneInId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneInId }
,                InTime = sel.InTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.DeviceType
,                HorizonOutId = sel.HorizonOut == null ? (long?)null : sel.HorizonOut.Id
,                WorkingOutId = sel.WorkingOut == null ? (long?)null : sel.WorkingOut.Id
,                sel.WorkingOutLenght
,                sel.WorkingOutDeadEnd
,                ZoneOutId = sel.ZoneOut == null ? (long?)null : sel.ZoneOut.Id
,                sel.LastFixationOnWorkingOut
,                HorizonInId = sel.HorizonIn == null ? (long?)null : sel.HorizonIn.Id
,                WorkingInId = sel.WorkingIn == null ? (long?)null : sel.WorkingIn.Id
,                sel.WorkingInLenght
,                sel.WorkingInDeadEnd
,                ZoneInId = sel.ZoneIn == null ? (long?)null : sel.ZoneIn.Id
,                sel.InTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal()
                {
                Label = select.Label
,                DeviceType = select.DeviceType
,                HorizonOut = select.HorizonOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonOutId }
,                WorkingOut = select.WorkingOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOutId }
,                WorkingOutLenght = select.WorkingOutLenght
,                WorkingOutDeadEnd = select.WorkingOutDeadEnd
,                ZoneOut = select.ZoneOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneOutId }
,                LastFixationOnWorkingOut = select.LastFixationOnWorkingOut
,                HorizonIn = select.HorizonInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonInId }
,                WorkingIn = select.WorkingInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingInId }
,                WorkingInLenght = select.WorkingInLenght
,                WorkingInDeadEnd = select.WorkingInDeadEnd
,                ZoneIn = select.ZoneInId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneInId }
,                InTime = select.InTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.DeviceType
,                HorizonOutId = sel.HorizonOut == null ? (long?)null : sel.HorizonOut.Id,
                HorizonOutName = sel.HorizonOut == null ? (string)null : sel.HorizonOut.Name
,                WorkingOutId = sel.WorkingOut == null ? (long?)null : sel.WorkingOut.Id,
                WorkingOutName = sel.WorkingOut == null ? (string)null : sel.WorkingOut.Name
,                sel.WorkingOutLenght
,                sel.WorkingOutDeadEnd
,                ZoneOutId = sel.ZoneOut == null ? (long?)null : sel.ZoneOut.Id,
                ZoneOutName = sel.ZoneOut == null ? (string)null : sel.ZoneOut.Name
,                sel.LastFixationOnWorkingOut
,                HorizonInId = sel.HorizonIn == null ? (long?)null : sel.HorizonIn.Id,
                HorizonInName = sel.HorizonIn == null ? (string)null : sel.HorizonIn.Name
,                WorkingInId = sel.WorkingIn == null ? (long?)null : sel.WorkingIn.Id,
                WorkingInName = sel.WorkingIn == null ? (string)null : sel.WorkingIn.Name
,                sel.WorkingInLenght
,                sel.WorkingInDeadEnd
,                ZoneInId = sel.ZoneIn == null ? (long?)null : sel.ZoneIn.Id,
                ZoneInName = sel.ZoneIn == null ? (string)null : sel.ZoneIn.Name
,                sel.InTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal()
                {
                Label = sel.Label
,                DeviceType = sel.DeviceType
,                HorizonOut = sel.HorizonOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonOutId, Name = (string)sel.HorizonOutName }
,                WorkingOut = sel.WorkingOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingOutId, Name = (string)sel.WorkingOutName }
,                WorkingOutLenght = sel.WorkingOutLenght
,                WorkingOutDeadEnd = sel.WorkingOutDeadEnd
,                ZoneOut = sel.ZoneOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneOutId, Name = (string)sel.ZoneOutName }
,                LastFixationOnWorkingOut = sel.LastFixationOnWorkingOut
,                HorizonIn = sel.HorizonInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonInId, Name = (string)sel.HorizonInName }
,                WorkingIn = sel.WorkingInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingInId, Name = (string)sel.WorkingInName }
,                WorkingInLenght = sel.WorkingInLenght
,                WorkingInDeadEnd = sel.WorkingInDeadEnd
,                ZoneIn = sel.ZoneInId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneInId, Name = (string)sel.ZoneInName }
,                InTime = sel.InTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Label
,                sel.DeviceType
,                HorizonOutId = sel.HorizonOut == null ? (long?)null : sel.HorizonOut.Id,
                HorizonOutName = sel.HorizonOut == null ? (string)null : sel.HorizonOut.Name
,                WorkingOutId = sel.WorkingOut == null ? (long?)null : sel.WorkingOut.Id,
                WorkingOutName = sel.WorkingOut == null ? (string)null : sel.WorkingOut.Name
,                sel.WorkingOutLenght
,                sel.WorkingOutDeadEnd
,                ZoneOutId = sel.ZoneOut == null ? (long?)null : sel.ZoneOut.Id,
                ZoneOutName = sel.ZoneOut == null ? (string)null : sel.ZoneOut.Name
,                sel.LastFixationOnWorkingOut
,                HorizonInId = sel.HorizonIn == null ? (long?)null : sel.HorizonIn.Id,
                HorizonInName = sel.HorizonIn == null ? (string)null : sel.HorizonIn.Name
,                WorkingInId = sel.WorkingIn == null ? (long?)null : sel.WorkingIn.Id,
                WorkingInName = sel.WorkingIn == null ? (string)null : sel.WorkingIn.Name
,                sel.WorkingInLenght
,                sel.WorkingInDeadEnd
,                ZoneInId = sel.ZoneIn == null ? (long?)null : sel.ZoneIn.Id,
                ZoneInName = sel.ZoneIn == null ? (string)null : sel.ZoneIn.Name
,                sel.InTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.WorkingBreakeJournal()
                {
                Label = select.Label
,                DeviceType = select.DeviceType
,                HorizonOut = select.HorizonOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonOutId, Name = (string)select.HorizonOutName }
,                WorkingOut = select.WorkingOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingOutId, Name = (string)select.WorkingOutName }
,                WorkingOutLenght = select.WorkingOutLenght
,                WorkingOutDeadEnd = select.WorkingOutDeadEnd
,                ZoneOut = select.ZoneOutId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneOutId, Name = (string)select.ZoneOutName }
,                LastFixationOnWorkingOut = select.LastFixationOnWorkingOut
,                HorizonIn = select.HorizonInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonInId, Name = (string)select.HorizonInName }
,                WorkingIn = select.WorkingInId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingInId, Name = (string)select.WorkingInName }
,                WorkingInLenght = select.WorkingInLenght
,                WorkingInDeadEnd = select.WorkingInDeadEnd
,                ZoneIn = select.ZoneInId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneInId, Name = (string)select.ZoneInName }
,                InTime = select.InTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal()
                {
                ZoneDangerous = sel.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)sel.ZoneDangerousId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneDangerous
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal()
                {
                ZoneDangerous = sel.ZoneDangerous
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneAccessPersonsJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Antenna
,                sel.IsManual
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal()
                {
                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                Antenna = sel.Antenna
,                IsManual = sel.IsManual
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Antenna
,                sel.IsManual
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneBindDeviceJournal()
                {
                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                Antenna = select.Antenna
,                IsManual = select.IsManual
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                UserId = sel.User == null ? (long?)null : sel.User.Id
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal()
                {
                ZoneDangerous = sel.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)sel.ZoneDangerousId }
,                User = sel.UserId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserId }
,                Description = sel.Description
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                UserId = sel.User == null ? (long?)null : sel.User.Id
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                User = select.UserId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserId }
,                Description = select.Description
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneDangerous
,                UserId = sel.User == null ? (long?)null : sel.User.Id,
                UserName = sel.User == null ? (string)null : sel.User.Name
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal()
                {
                ZoneDangerous = sel.ZoneDangerous
,                User = sel.UserId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)sel.UserId, Name = (string)sel.UserName }
,                Description = sel.Description
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                UserId = sel.User == null ? (long?)null : sel.User.Id,
                UserName = sel.User == null ? (string)null : sel.User.Name
,                sel.Description
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneDangerousActivityJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                User = select.UserId == null? null : new Utis.Minex.ProductionModel.UserData { Id = (long)select.UserId, Name = (string)select.UserName }
,                Description = select.Description
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DangerousZoneType
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Data
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal()
                {
                DangerousZoneType = sel.DangerousZoneType
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                Data = sel.Data
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DangerousZoneType
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.Data
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal()
                {
                DangerousZoneType = select.DangerousZoneType
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                Data = select.Data
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DangerousZoneType
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.Data
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal()
                {
                DangerousZoneType = sel.DangerousZoneType
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId, Name = (string)sel.ZoneName }
,                Data = sel.Data
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DangerousZoneType
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.Data
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal()
                {
                DangerousZoneType = select.DangerousZoneType
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId, Name = (string)select.ZoneName }
,                Data = select.Data
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                ZoneResponsibilityId = sel.ZoneResponsibility == null ? (long?)null : sel.ZoneResponsibility.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                ZoneResponsibility = sel.ZoneResponsibilityId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility { Id = (long)sel.ZoneResponsibilityId }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                ZoneResponsibilityId = sel.ZoneResponsibility == null ? (long?)null : sel.ZoneResponsibility.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                ZoneResponsibility = select.ZoneResponsibilityId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility { Id = (long)select.ZoneResponsibilityId }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                ZoneResponsibilityId = sel.ZoneResponsibility == null ? (long?)null : sel.ZoneResponsibility.Id,
                ZoneResponsibilityName = sel.ZoneResponsibility == null ? (string)null : sel.ZoneResponsibility.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                ZoneResponsibility = sel.ZoneResponsibilityId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility { Id = (long)sel.ZoneResponsibilityId, Name = (string)sel.ZoneResponsibilityName }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                ZoneResponsibilityId = sel.ZoneResponsibility == null ? (long?)null : sel.ZoneResponsibility.Id,
                ZoneResponsibilityName = sel.ZoneResponsibility == null ? (string)null : sel.ZoneResponsibility.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneResponsibilityBindDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                ZoneResponsibility = select.ZoneResponsibilityId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility { Id = (long)select.ZoneResponsibilityId, Name = (string)select.ZoneResponsibilityName }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                sel.DaysOfWeek
,                sel.TimeStart
,                sel.TimeEnd
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal()
                {
                ZoneDangerous = sel.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)sel.ZoneDangerousId }
,                DaysOfWeek = sel.DaysOfWeek
,                TimeStart = sel.TimeStart
,                TimeEnd = sel.TimeEnd
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                sel.DaysOfWeek
,                sel.TimeStart
,                sel.TimeEnd
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                DaysOfWeek = select.DaysOfWeek
,                TimeStart = select.TimeStart
,                TimeEnd = select.TimeEnd
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ZoneDangerous
,                sel.DaysOfWeek
,                sel.TimeStart
,                sel.TimeEnd
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal()
                {
                ZoneDangerous = sel.ZoneDangerous
,                DaysOfWeek = sel.DaysOfWeek
,                TimeStart = sel.TimeStart
,                TimeEnd = sel.TimeEnd
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneDangerousId = sel.ZoneDangerous == null ? (long?)null : sel.ZoneDangerous.Id
,                sel.DaysOfWeek
,                sel.TimeStart
,                sel.TimeEnd
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneSchedulerJournal()
                {
                ZoneDangerous = select.ZoneDangerousId == null? null : new Utis.Minex.ProductionModel.Journals.ZoneDangerousJournal { Id = (long)select.ZoneDangerousId }
,                DaysOfWeek = select.DaysOfWeek
,                TimeStart = select.TimeStart
,                TimeEnd = select.TimeEnd
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneTypeId = sel.ZoneType == null ? (long?)null : sel.ZoneType.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneTypeJournal()
                {
                ZoneType = sel.ZoneTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneType { Id = (long)sel.ZoneTypeId }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId }
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneTypeJournal FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneTypeId = sel.ZoneType == null ? (long?)null : sel.ZoneType.Id
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneTypeJournal()
                {
                ZoneType = select.ZoneTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneType { Id = (long)select.ZoneTypeId }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId }
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneTypeId = sel.ZoneType == null ? (long?)null : sel.ZoneType.Id,
                ZoneTypeName = sel.ZoneType == null ? (string)null : sel.ZoneType.Name
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Journals.ZoneTypeJournal()
                {
                ZoneType = sel.ZoneTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneType { Id = (long)sel.ZoneTypeId, Name = (string)sel.ZoneTypeName }
,                Zone = sel.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)sel.ZoneId, Name = (string)sel.ZoneName }
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Journals.ZoneTypeJournal FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Journals.ZoneTypeJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ZoneTypeId = sel.ZoneType == null ? (long?)null : sel.ZoneType.Id,
                ZoneTypeName = sel.ZoneType == null ? (string)null : sel.ZoneType.Name
,                ZoneId = sel.Zone == null ? (long?)null : sel.Zone.Id,
                ZoneName = sel.Zone == null ? (string)null : sel.Zone.Name
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Journals.ZoneTypeJournal()
                {
                ZoneType = select.ZoneTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.ZoneType { Id = (long)select.ZoneTypeId, Name = (string)select.ZoneTypeName }
,                Zone = select.ZoneId == null? null : new Utis.Minex.ProductionModel.MineSpace.Zone { Id = (long)select.ZoneId, Name = (string)select.ZoneName }
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChangedProperties
,                sel.UserName
,                sel.FullName
,                sel.EntityActionType
,                sel.ChangedObjectType
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord()
                {
                ChangedProperties = sel.ChangedProperties
,                UserName = sel.UserName
,                FullName = sel.FullName
,                EntityActionType = sel.EntityActionType
,                ChangedObjectType = sel.ChangedObjectType
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ChangedProperties
,                sel.UserName
,                sel.FullName
,                sel.EntityActionType
,                sel.ChangedObjectType
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord()
                {
                ChangedProperties = select.ChangedProperties
,                UserName = select.UserName
,                FullName = select.FullName
,                EntityActionType = select.EntityActionType
,                ChangedObjectType = select.ChangedObjectType
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JournalChangeRecordId = sel.JournalChangeRecord == null ? (long?)null : sel.JournalChangeRecord.Id
,                sel.PropertyName
,                sel.PropertyType
,                sel.OldValue
,                sel.NewValue
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory()
                {
                JournalChangeRecord = sel.JournalChangeRecordId == null? null : new Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord { Id = (long)sel.JournalChangeRecordId }
,                PropertyName = sel.PropertyName
,                PropertyType = sel.PropertyType
,                OldValue = sel.OldValue
,                NewValue = sel.NewValue
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JournalChangeRecordId = sel.JournalChangeRecord == null ? (long?)null : sel.JournalChangeRecord.Id
,                sel.PropertyName
,                sel.PropertyType
,                sel.OldValue
,                sel.NewValue
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory()
                {
                JournalChangeRecord = select.JournalChangeRecordId == null? null : new Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord { Id = (long)select.JournalChangeRecordId }
,                PropertyName = select.PropertyName
,                PropertyType = select.PropertyType
,                OldValue = select.OldValue
,                NewValue = select.NewValue
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.JournalChangeRecord
,                sel.PropertyName
,                sel.PropertyType
,                sel.OldValue
,                sel.NewValue
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory()
                {
                JournalChangeRecord = sel.JournalChangeRecord
,                PropertyName = sel.PropertyName
,                PropertyType = sel.PropertyType
,                OldValue = sel.OldValue
,                NewValue = sel.NewValue
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JournalChangeRecordId = sel.JournalChangeRecord == null ? (long?)null : sel.JournalChangeRecord.Id
,                sel.PropertyName
,                sel.PropertyType
,                sel.OldValue
,                sel.NewValue
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.JournalChanges.PropertyChangeHistory()
                {
                JournalChangeRecord = select.JournalChangeRecordId == null? null : new Utis.Minex.ProductionModel.JournalChanges.JournalChangeRecord { Id = (long)select.JournalChangeRecordId }
,                PropertyName = select.PropertyName
,                PropertyType = select.PropertyType
,                OldValue = select.OldValue
,                NewValue = select.NewValue
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.GraphicalObject> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Graphical.GraphicalObject> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Order
,                sel.MdType
,                sel.Childs
,                ParentId = sel.Parent == null ? (long?)null : sel.Parent.Id
,                sel.IsPublished
,                sel.PublishStartDate
,                sel.PublishEndDate
,                sel.Summary
,                sel.LastChangeDate
,                sel.Version
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.GraphicalObject()
                {
                Order = sel.Order
,                MdType = sel.MdType
,                Childs = sel.Childs
,                Parent = sel.ParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)sel.ParentId }
,                IsPublished = sel.IsPublished
,                PublishStartDate = sel.PublishStartDate
,                PublishEndDate = sel.PublishEndDate
,                Summary = sel.Summary
,                LastChangeDate = sel.LastChangeDate
,                Version = sel.Version
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.GraphicalObject FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Graphical.GraphicalObject> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Order
,                sel.MdType
,                sel.Childs
,                ParentId = sel.Parent == null ? (long?)null : sel.Parent.Id
,                sel.IsPublished
,                sel.PublishStartDate
,                sel.PublishEndDate
,                sel.Summary
,                sel.LastChangeDate
,                sel.Version
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.GraphicalObject()
                {
                Order = select.Order
,                MdType = select.MdType
,                Childs = select.Childs
,                Parent = select.ParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)select.ParentId }
,                IsPublished = select.IsPublished
,                PublishStartDate = select.PublishStartDate
,                PublishEndDate = select.PublishEndDate
,                Summary = select.Summary
,                LastChangeDate = select.LastChangeDate
,                Version = select.Version
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.MIMSheme> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMSheme> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                BranchId = sel.Branch == null ? (long?)null : sel.Branch.Id
,                sel.Comment
,                sel.Guid
,                sel.Guids
,                sel.Data
,                sel.Changes
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IsGraphChanged
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.MIMSheme()
                {
                Branch = sel.BranchId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch { Id = (long)sel.BranchId }
,                Comment = sel.Comment
,                Guid = sel.Guid
,                Guids = sel.Guids
,                Data = sel.Data
,                Changes = sel.Changes
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                IsGraphChanged = sel.IsGraphChanged
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.MIMSheme FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMSheme> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                BranchId = sel.Branch == null ? (long?)null : sel.Branch.Id
,                sel.Comment
,                sel.Guid
,                sel.Guids
,                sel.Data
,                sel.Changes
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.IsGraphChanged
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.MIMSheme()
                {
                Branch = select.BranchId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch { Id = (long)select.BranchId }
,                Comment = select.Comment
,                Guid = select.Guid
,                Guids = select.Guids
,                Data = select.Data
,                Changes = select.Changes
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                IsGraphChanged = select.IsGraphChanged
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.MIMSheme> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMSheme> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                BranchId = sel.Branch == null ? (long?)null : sel.Branch.Id,
                BranchName = sel.Branch == null ? (string)null : sel.Branch.Name
,                sel.Comment
,                sel.Guid
,                sel.Guids
,                sel.Data
,                sel.Changes
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IsGraphChanged
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.MIMSheme()
                {
                Branch = sel.BranchId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch { Id = (long)sel.BranchId, Name = (string)sel.BranchName }
,                Comment = sel.Comment
,                Guid = sel.Guid
,                Guids = sel.Guids
,                Data = sel.Data
,                Changes = sel.Changes
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                IsGraphChanged = sel.IsGraphChanged
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.MIMSheme FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMSheme> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                BranchId = sel.Branch == null ? (long?)null : sel.Branch.Id,
                BranchName = sel.Branch == null ? (string)null : sel.Branch.Name
,                sel.Comment
,                sel.Guid
,                sel.Guids
,                sel.Data
,                sel.Changes
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.IsGraphChanged
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.MIMSheme()
                {
                Branch = select.BranchId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch { Id = (long)select.BranchId, Name = (string)select.BranchName }
,                Comment = select.Comment
,                Guid = select.Guid
,                Guids = select.Guids
,                Data = select.Data
,                Changes = select.Changes
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                IsGraphChanged = select.IsGraphChanged
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BranchType
,                sel.Comment
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch()
                {
                BranchType = sel.BranchType
,                Comment = sel.Comment
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.MIMShemeBranch FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BranchType
,                sel.Comment
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch()
                {
                BranchType = select.BranchType
,                Comment = select.Comment
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BranchType
,                sel.Comment
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch()
                {
                BranchType = sel.BranchType
,                Comment = sel.Comment
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.MIMShemeBranch FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Graphical.MIMShemeBranch> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BranchType
,                sel.Comment
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.MIMShemeBranch()
                {
                BranchType = select.BranchType
,                Comment = select.Comment
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage()
                {
                Data = sel.Data
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage()
                {
                Data = select.Data
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage()
                {
                Data = sel.Data
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage()
                {
                Data = select.Data
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MIMShemeId = sel.MIMSheme == null ? (long?)null : sel.MIMSheme.Id
,                ShemeBackgroundImageId = sel.ShemeBackgroundImage == null ? (long?)null : sel.ShemeBackgroundImage.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.ShemeToBackground()
                {
                MIMSheme = sel.MIMShemeId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMSheme { Id = (long)sel.MIMShemeId }
,                ShemeBackgroundImage = sel.ShemeBackgroundImageId == null? null : new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage { Id = (long)sel.ShemeBackgroundImageId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.ShemeToBackground FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MIMShemeId = sel.MIMSheme == null ? (long?)null : sel.MIMSheme.Id
,                ShemeBackgroundImageId = sel.ShemeBackgroundImage == null ? (long?)null : sel.ShemeBackgroundImage.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.ShemeToBackground()
                {
                MIMSheme = select.MIMShemeId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMSheme { Id = (long)select.MIMShemeId }
,                ShemeBackgroundImage = select.ShemeBackgroundImageId == null? null : new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage { Id = (long)select.ShemeBackgroundImageId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MIMSheme
,                sel.ShemeBackgroundImage
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Graphical.ShemeToBackground()
                {
                MIMSheme = sel.MIMSheme
,                ShemeBackgroundImage = sel.ShemeBackgroundImage
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Graphical.ShemeToBackground FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Graphical.ShemeToBackground> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MIMShemeId = sel.MIMSheme == null ? (long?)null : sel.MIMSheme.Id
,                ShemeBackgroundImageId = sel.ShemeBackgroundImage == null ? (long?)null : sel.ShemeBackgroundImage.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Graphical.ShemeToBackground()
                {
                MIMSheme = select.MIMShemeId == null? null : new Utis.Minex.ProductionModel.Graphical.MIMSheme { Id = (long)select.MIMShemeId }
,                ShemeBackgroundImage = select.ShemeBackgroundImageId == null? null : new Utis.Minex.ProductionModel.Graphical.ShemeBackgroundImage { Id = (long)select.ShemeBackgroundImageId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.GasAnalyzer> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.GasAnalyzer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.GasAnalyzer()
                {
                Number = sel.Number
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.GasAnalyzer FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.GasAnalyzer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.GasAnalyzer()
                {
                Number = select.Number
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.GasAnalyzer> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.GasAnalyzer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.GasAnalyzer()
                {
                Number = sel.Number
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.GasAnalyzer FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.GasAnalyzer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.GasAnalyzer()
                {
                Number = select.Number
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.IndividualDevice> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.IndividualDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.IndividualDevice()
                {
                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.IndividualDevice FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.IndividualDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.IndividualDevice()
                {
                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.IndividualDevice> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.IndividualDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.IndividualDevice()
                {
                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.IndividualDevice FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.IndividualDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.IndividualDevice()
                {
                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Lamp> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.Lamp> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                LampTypeId = sel.LampType == null ? (long?)null : sel.LampType.Id
,                sel.GroupNumber
,                sel.HasFlashingBeacon
,                sel.GlonFrequency
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.IsVirtual
,                RoomId = sel.Room == null ? (long?)null : sel.Room.Id
,                OwnerRoomId = sel.OwnerRoom == null ? (long?)null : sel.OwnerRoom.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Lamp()
                {
                Number = sel.Number
,                LampType = sel.LampTypeId == null? null : new Utis.Minex.ProductionModel.Common.LampType { Id = (long)sel.LampTypeId }
,                GroupNumber = sel.GroupNumber
,                HasFlashingBeacon = sel.HasFlashingBeacon
,                GlonFrequency = sel.GlonFrequency
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                IsVirtual = sel.IsVirtual
,                Room = sel.RoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.RoomId }
,                OwnerRoom = sel.OwnerRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.OwnerRoomId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Lamp FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.Lamp> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                LampTypeId = sel.LampType == null ? (long?)null : sel.LampType.Id
,                sel.GroupNumber
,                sel.HasFlashingBeacon
,                sel.GlonFrequency
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.IsVirtual
,                RoomId = sel.Room == null ? (long?)null : sel.Room.Id
,                OwnerRoomId = sel.OwnerRoom == null ? (long?)null : sel.OwnerRoom.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Lamp()
                {
                Number = select.Number
,                LampType = select.LampTypeId == null? null : new Utis.Minex.ProductionModel.Common.LampType { Id = (long)select.LampTypeId }
,                GroupNumber = select.GroupNumber
,                HasFlashingBeacon = select.HasFlashingBeacon
,                GlonFrequency = select.GlonFrequency
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                IsVirtual = select.IsVirtual
,                Room = select.RoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.RoomId }
,                OwnerRoom = select.OwnerRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.OwnerRoomId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Lamp> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.Lamp> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                LampTypeId = sel.LampType == null ? (long?)null : sel.LampType.Id,
                LampTypeName = sel.LampType == null ? (string)null : sel.LampType.Name
,                sel.GroupNumber
,                sel.HasFlashingBeacon
,                sel.GlonFrequency
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.IsVirtual
,                RoomId = sel.Room == null ? (long?)null : sel.Room.Id,
                RoomName = sel.Room == null ? (string)null : sel.Room.Name
,                OwnerRoomId = sel.OwnerRoom == null ? (long?)null : sel.OwnerRoom.Id,
                OwnerRoomName = sel.OwnerRoom == null ? (string)null : sel.OwnerRoom.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Lamp()
                {
                Number = sel.Number
,                LampType = sel.LampTypeId == null? null : new Utis.Minex.ProductionModel.Common.LampType { Id = (long)sel.LampTypeId, Name = (string)sel.LampTypeName }
,                GroupNumber = sel.GroupNumber
,                HasFlashingBeacon = sel.HasFlashingBeacon
,                GlonFrequency = sel.GlonFrequency
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                IsVirtual = sel.IsVirtual
,                Room = sel.RoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.RoomId, Name = (string)sel.RoomName }
,                OwnerRoom = sel.OwnerRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)sel.OwnerRoomId, Name = (string)sel.OwnerRoomName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Lamp FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.Lamp> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                LampTypeId = sel.LampType == null ? (long?)null : sel.LampType.Id,
                LampTypeName = sel.LampType == null ? (string)null : sel.LampType.Name
,                sel.GroupNumber
,                sel.HasFlashingBeacon
,                sel.GlonFrequency
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.IsVirtual
,                RoomId = sel.Room == null ? (long?)null : sel.Room.Id,
                RoomName = sel.Room == null ? (string)null : sel.Room.Name
,                OwnerRoomId = sel.OwnerRoom == null ? (long?)null : sel.OwnerRoom.Id,
                OwnerRoomName = sel.OwnerRoom == null ? (string)null : sel.OwnerRoom.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Lamp()
                {
                Number = select.Number
,                LampType = select.LampTypeId == null? null : new Utis.Minex.ProductionModel.Common.LampType { Id = (long)select.LampTypeId, Name = (string)select.LampTypeName }
,                GroupNumber = select.GroupNumber
,                HasFlashingBeacon = select.HasFlashingBeacon
,                GlonFrequency = select.GlonFrequency
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                IsVirtual = select.IsVirtual
,                Room = select.RoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.RoomId, Name = (string)select.RoomName }
,                OwnerRoom = select.OwnerRoomId == null? null : new Utis.Minex.ProductionModel.Positioning.IndividualDevicesRoom { Id = (long)select.OwnerRoomId, Name = (string)select.OwnerRoomName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MarkPoint> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.MarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.MarkPointState
,                sel.FirmwareVersion
,                sel.Workings
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MarkPoint()
                {
                Serial = sel.Serial
,                MarkPointState = sel.MarkPointState
,                FirmwareVersion = sel.FirmwareVersion
,                Workings = sel.Workings
,                Horizon = sel.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonId }
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MarkPoint FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.MarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.MarkPointState
,                sel.FirmwareVersion
,                sel.Workings
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MarkPoint()
                {
                Serial = select.Serial
,                MarkPointState = select.MarkPointState
,                FirmwareVersion = select.FirmwareVersion
,                Workings = select.Workings
,                Horizon = select.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonId }
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MarkPoint> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.MarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.MarkPointState
,                sel.FirmwareVersion
,                sel.Workings
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id,
                HorizonName = sel.Horizon == null ? (string)null : sel.Horizon.Name
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MarkPoint()
                {
                Serial = sel.Serial
,                MarkPointState = sel.MarkPointState
,                FirmwareVersion = sel.FirmwareVersion
,                Workings = sel.Workings
,                Horizon = sel.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonId, Name = (string)sel.HorizonName }
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MarkPoint FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.MarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.MarkPointState
,                sel.FirmwareVersion
,                sel.Workings
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id,
                HorizonName = sel.Horizon == null ? (string)null : sel.Horizon.Name
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MarkPoint()
                {
                Serial = select.Serial
,                MarkPointState = select.MarkPointState
,                FirmwareVersion = select.FirmwareVersion
,                Workings = select.Workings
,                Horizon = select.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonId, Name = (string)select.HorizonName }
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MediaConverter> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverter> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MediaIn
,                sel.MediaOut
,                sel.PowerIn
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MediaConverter()
                {
                MediaIn = sel.MediaIn
,                MediaOut = sel.MediaOut
,                PowerIn = sel.PowerIn
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MediaConverter FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverter> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MediaIn
,                sel.MediaOut
,                sel.PowerIn
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MediaConverter()
                {
                MediaIn = select.MediaIn
,                MediaOut = select.MediaOut
,                PowerIn = select.PowerIn
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MediaConverter> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverter> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MediaIn
,                sel.MediaOut
,                sel.PowerIn
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MediaConverter()
                {
                MediaIn = sel.MediaIn
,                MediaOut = sel.MediaOut
,                PowerIn = sel.PowerIn
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MediaConverter FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverter> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MediaIn
,                sel.MediaOut
,                sel.PowerIn
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MediaConverter()
                {
                MediaIn = select.MediaIn
,                MediaOut = select.MediaOut
,                PowerIn = select.PowerIn
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MediaConverterPort> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverterPort> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MediaConverterId = sel.MediaConverter == null ? (long?)null : sel.MediaConverter.Id
,                SettingsId = sel.Settings == null ? (long?)null : sel.Settings.Id
,                sel.IPPort
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MediaConverterPort()
                {
                MediaConverter = sel.MediaConverterId == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverter { Id = (long)sel.MediaConverterId }
,                Settings = sel.SettingsId == null? null : new Utis.Minex.ProductionModel.Positioning.PortSettings { Id = (long)sel.SettingsId }
,                IPPort = sel.IPPort
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MediaConverterPort FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverterPort> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MediaConverterId = sel.MediaConverter == null ? (long?)null : sel.MediaConverter.Id
,                SettingsId = sel.Settings == null ? (long?)null : sel.Settings.Id
,                sel.IPPort
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MediaConverterPort()
                {
                MediaConverter = select.MediaConverterId == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverter { Id = (long)select.MediaConverterId }
,                Settings = select.SettingsId == null? null : new Utis.Minex.ProductionModel.Positioning.PortSettings { Id = (long)select.SettingsId }
,                IPPort = select.IPPort
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MediaConverterPort> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverterPort> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MediaConverterId = sel.MediaConverter == null ? (long?)null : sel.MediaConverter.Id,
                MediaConverterName = sel.MediaConverter == null ? (string)null : sel.MediaConverter.Name
,                SettingsId = sel.Settings == null ? (long?)null : sel.Settings.Id,
                SettingsName = sel.Settings == null ? (string)null : sel.Settings.Name
,                sel.IPPort
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MediaConverterPort()
                {
                MediaConverter = sel.MediaConverterId == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverter { Id = (long)sel.MediaConverterId, Name = (string)sel.MediaConverterName }
,                Settings = sel.SettingsId == null? null : new Utis.Minex.ProductionModel.Positioning.PortSettings { Id = (long)sel.SettingsId, Name = (string)sel.SettingsName }
,                IPPort = sel.IPPort
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MediaConverterPort FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.MediaConverterPort> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MediaConverterId = sel.MediaConverter == null ? (long?)null : sel.MediaConverter.Id,
                MediaConverterName = sel.MediaConverter == null ? (string)null : sel.MediaConverter.Name
,                SettingsId = sel.Settings == null ? (long?)null : sel.Settings.Id,
                SettingsName = sel.Settings == null ? (string)null : sel.Settings.Name
,                sel.IPPort
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MediaConverterPort()
                {
                MediaConverter = select.MediaConverterId == null? null : new Utis.Minex.ProductionModel.Devices.MediaConverter { Id = (long)select.MediaConverterId, Name = (string)select.MediaConverterName }
,                Settings = select.SettingsId == null? null : new Utis.Minex.ProductionModel.Positioning.PortSettings { Id = (long)select.SettingsId, Name = (string)select.SettingsName }
,                IPPort = select.IPPort
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.FirmwareVersion
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MobileMarkPoint()
                {
                Serial = sel.Serial
,                FirmwareVersion = sel.FirmwareVersion
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MobileMarkPoint FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.FirmwareVersion
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MobileMarkPoint()
                {
                Serial = select.Serial
,                FirmwareVersion = select.FirmwareVersion
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.FirmwareVersion
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MobileMarkPoint()
                {
                Serial = sel.Serial
,                FirmwareVersion = sel.FirmwareVersion
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MobileMarkPoint FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Serial
,                sel.FirmwareVersion
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MobileMarkPoint()
                {
                Serial = select.Serial
,                FirmwareVersion = select.FirmwareVersion
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MobileRegDevice> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileRegDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Version
,                sel.Ip
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MobileRegDevice()
                {
                Version = sel.Version
,                Ip = sel.Ip
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MobileRegDevice FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileRegDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Version
,                sel.Ip
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MobileRegDevice()
                {
                Version = select.Version
,                Ip = select.Ip
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.MobileRegDevice> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileRegDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Version
,                sel.Ip
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.MobileRegDevice()
                {
                Version = sel.Version
,                Ip = sel.Ip
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.MobileRegDevice FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.MobileRegDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Version
,                sel.Ip
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.MobileRegDevice()
                {
                Version = select.Version
,                Ip = select.Ip
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Radio> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.Radio> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Radio()
                {
                Number = sel.Number
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Radio FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.Radio> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Radio()
                {
                Number = select.Number
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Radio> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.Radio> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Radio()
                {
                Number = sel.Number
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                EndWarranty = sel.EndWarranty
,                EndLifetime = sel.EndLifetime
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Radio FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.Radio> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.BeginDate
,                sel.EndDate
,                sel.EndWarranty
,                sel.EndLifetime
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Radio()
                {
                Number = select.Number
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                EndWarranty = select.EndWarranty
,                EndLifetime = select.EndLifetime
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Reader> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.Reader> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ModbusAddress
,                sel.IsEnable
,                sel.PowerIn
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.ReaderType
,                sel.Version
,                sel.ControlAntenna
,                sel.ControlDiscreteIn
,                sel.IsCoverControl
,                sel.IsPowerSupplyControl
,                sel.IsChargeLevelControl
,                sel.IsTrafficLight
,                sel.PositioningType
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Reader()
                {
                ModbusAddress = sel.ModbusAddress
,                IsEnable = sel.IsEnable
,                PowerIn = sel.PowerIn
,                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId }
,                ReaderType = sel.ReaderType
,                Version = sel.Version
,                ControlAntenna = sel.ControlAntenna
,                ControlDiscreteIn = sel.ControlDiscreteIn
,                IsCoverControl = sel.IsCoverControl
,                IsPowerSupplyControl = sel.IsPowerSupplyControl
,                IsChargeLevelControl = sel.IsChargeLevelControl
,                IsTrafficLight = sel.IsTrafficLight
,                PositioningType = sel.PositioningType
,                Horizon = sel.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonId }
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Reader FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.Reader> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ModbusAddress
,                sel.IsEnable
,                sel.PowerIn
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id
,                sel.ReaderType
,                sel.Version
,                sel.ControlAntenna
,                sel.ControlDiscreteIn
,                sel.IsCoverControl
,                sel.IsPowerSupplyControl
,                sel.IsChargeLevelControl
,                sel.IsTrafficLight
,                sel.PositioningType
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Reader()
                {
                ModbusAddress = select.ModbusAddress
,                IsEnable = select.IsEnable
,                PowerIn = select.PowerIn
,                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId }
,                ReaderType = select.ReaderType
,                Version = select.Version
,                ControlAntenna = select.ControlAntenna
,                ControlDiscreteIn = select.ControlDiscreteIn
,                IsCoverControl = select.IsCoverControl
,                IsPowerSupplyControl = select.IsPowerSupplyControl
,                IsChargeLevelControl = select.IsChargeLevelControl
,                IsTrafficLight = select.IsTrafficLight
,                PositioningType = select.PositioningType
,                Horizon = select.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonId }
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.Reader> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.Reader> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ModbusAddress
,                sel.IsEnable
,                sel.PowerIn
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.ReaderType
,                sel.Version
,                sel.ControlAntenna
,                sel.ControlDiscreteIn
,                sel.IsCoverControl
,                sel.IsPowerSupplyControl
,                sel.IsChargeLevelControl
,                sel.IsTrafficLight
,                sel.PositioningType
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id,
                HorizonName = sel.Horizon == null ? (string)null : sel.Horizon.Name
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.Reader()
                {
                ModbusAddress = sel.ModbusAddress
,                IsEnable = sel.IsEnable
,                PowerIn = sel.PowerIn
,                LineConfig = sel.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)sel.LineConfigId, Name = (string)sel.LineConfigName }
,                ReaderType = sel.ReaderType
,                Version = sel.Version
,                ControlAntenna = sel.ControlAntenna
,                ControlDiscreteIn = sel.ControlDiscreteIn
,                IsCoverControl = sel.IsCoverControl
,                IsPowerSupplyControl = sel.IsPowerSupplyControl
,                IsChargeLevelControl = sel.IsChargeLevelControl
,                IsTrafficLight = sel.IsTrafficLight
,                PositioningType = sel.PositioningType
,                Horizon = sel.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)sel.HorizonId, Name = (string)sel.HorizonName }
,                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.Reader FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.Reader> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ModbusAddress
,                sel.IsEnable
,                sel.PowerIn
,                LineConfigId = sel.LineConfig == null ? (long?)null : sel.LineConfig.Id,
                LineConfigName = sel.LineConfig == null ? (string)null : sel.LineConfig.Name
,                sel.ReaderType
,                sel.Version
,                sel.ControlAntenna
,                sel.ControlDiscreteIn
,                sel.IsCoverControl
,                sel.IsPowerSupplyControl
,                sel.IsChargeLevelControl
,                sel.IsTrafficLight
,                sel.PositioningType
,                HorizonId = sel.Horizon == null ? (long?)null : sel.Horizon.Id,
                HorizonName = sel.Horizon == null ? (string)null : sel.Horizon.Name
,                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.Reader()
                {
                ModbusAddress = select.ModbusAddress
,                IsEnable = select.IsEnable
,                PowerIn = select.PowerIn
,                LineConfig = select.LineConfigId == null? null : new Utis.Minex.ProductionModel.Positioning.LineConfig { Id = (long)select.LineConfigId, Name = (string)select.LineConfigName }
,                ReaderType = select.ReaderType
,                Version = select.Version
,                ControlAntenna = select.ControlAntenna
,                ControlDiscreteIn = select.ControlDiscreteIn
,                IsCoverControl = select.IsCoverControl
,                IsPowerSupplyControl = select.IsPowerSupplyControl
,                IsChargeLevelControl = select.IsChargeLevelControl
,                IsTrafficLight = select.IsTrafficLight
,                PositioningType = select.PositioningType
,                Horizon = select.HorizonId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Horizon { Id = (long)select.HorizonId, Name = (string)select.HorizonName }
,                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId }
,                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId }
,                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint()
                {
                MarkPoint = sel.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)sel.MarkPointId, Name = (string)sel.MarkPointName }
,                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId, Name = (string)sel.ReaderName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointId = sel.MarkPoint == null ? (long?)null : sel.MarkPoint.Id,
                MarkPointName = sel.MarkPoint == null ? (string)null : sel.MarkPoint.Name
,                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id,
                ReaderName = sel.Reader == null ? (string)null : sel.Reader.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.ReadersDontControlMarkPoint()
                {
                MarkPoint = select.MarkPointId == null? null : new Utis.Minex.ProductionModel.Devices.MarkPoint { Id = (long)select.MarkPointId, Name = (string)select.MarkPointName }
,                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId, Name = (string)select.ReaderName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.RfidDevice> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Rfid
,                sel.RfidDeviceType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.RfidDevice()
                {
                Rfid = sel.Rfid
,                RfidDeviceType = sel.RfidDeviceType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.RfidDevice FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Rfid
,                sel.RfidDeviceType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.RfidDevice()
                {
                Rfid = select.Rfid
,                RfidDeviceType = select.RfidDeviceType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.RfidDevice> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Rfid
,                sel.RfidDeviceType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.RfidDevice()
                {
                Rfid = sel.Rfid
,                RfidDeviceType = sel.RfidDeviceType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.RfidDevice FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDevice> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Rfid
,                sel.RfidDeviceType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.RfidDevice()
                {
                Rfid = select.Rfid
,                RfidDeviceType = select.RfidDeviceType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RfidDeviceType
,                sel.RfidFrom
,                sel.RfidTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.RfidDeviceInterval()
                {
                RfidDeviceType = sel.RfidDeviceType
,                RfidFrom = sel.RfidFrom
,                RfidTo = sel.RfidTo
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.RfidDeviceInterval FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RfidDeviceType
,                sel.RfidFrom
,                sel.RfidTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.RfidDeviceInterval()
                {
                RfidDeviceType = select.RfidDeviceType
,                RfidFrom = select.RfidFrom
,                RfidTo = select.RfidTo
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RfidDeviceType
,                sel.RfidFrom
,                sel.RfidTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.RfidDeviceInterval()
                {
                RfidDeviceType = sel.RfidDeviceType
,                RfidFrom = sel.RfidFrom
,                RfidTo = sel.RfidTo
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.RfidDeviceInterval FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.RfidDeviceInterval> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RfidDeviceType
,                sel.RfidFrom
,                sel.RfidTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.RfidDeviceInterval()
                {
                RfidDeviceType = select.RfidDeviceType
,                RfidFrom = select.RfidFrom
,                RfidTo = select.RfidTo
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.URS> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Devices.URS> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.URS()
                {
                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.URS FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Devices.URS> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.URS()
                {
                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Devices.URS> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Devices.URS> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Devices.URS()
                {
                RfidDevice = sel.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)sel.RfidDeviceId, Name = (string)sel.RfidDeviceName }
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Devices.URS FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Devices.URS> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                RfidDeviceId = sel.RfidDevice == null ? (long?)null : sel.RfidDevice.Id,
                RfidDeviceName = sel.RfidDevice == null ? (string)null : sel.RfidDevice.Name
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Devices.URS()
                {
                RfidDevice = select.RfidDeviceId == null? null : new Utis.Minex.ProductionModel.Devices.RfidDevice { Id = (long)select.RfidDeviceId, Name = (string)select.RfidDeviceName }
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.DataProviderRegistration> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderRegistration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderTypeFullName
,                sel.Username
,                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.DataProviderRegistration()
                {
                DataProviderTypeFullName = sel.DataProviderTypeFullName
,                Username = sel.Username
,                Password = sel.Password
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.DataProviderRegistration FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderRegistration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderTypeFullName
,                sel.Username
,                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.DataProviderRegistration()
                {
                DataProviderTypeFullName = select.DataProviderTypeFullName
,                Username = select.Username
,                Password = select.Password
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.DataProviderRegistration> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderRegistration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderTypeFullName
,                sel.Username
,                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.DataProviderRegistration()
                {
                DataProviderTypeFullName = sel.DataProviderTypeFullName
,                Username = sel.Username
,                Password = sel.Password
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.DataProviderRegistration FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderRegistration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DataProviderTypeFullName
,                sel.Username
,                sel.Password
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.DataProviderRegistration()
                {
                DataProviderTypeFullName = select.DataProviderTypeFullName
,                Username = select.Username
,                Password = select.Password
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.DataProviderServer> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderServer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Host
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.DataProviderServer()
                {
                Host = sel.Host
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.DataProviderServer FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderServer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Host
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.DataProviderServer()
                {
                Host = select.Host
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.DataProviderServer> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderServer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Host
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.DataProviderServer()
                {
                Host = sel.Host
,                SerialNumber = sel.SerialNumber
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.DataProviderServer FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Common.DataProviderServer> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Host
,                sel.SerialNumber
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.DataProviderServer()
                {
                Host = select.Host
,                SerialNumber = select.SerialNumber
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.LampType> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Common.LampType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Manufacturer
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.LampType()
                {
                Manufacturer = sel.Manufacturer
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.LampType FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Common.LampType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Manufacturer
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.LampType()
                {
                Manufacturer = select.Manufacturer
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.LampType> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Common.LampType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Manufacturer
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.LampType()
                {
                Manufacturer = sel.Manufacturer
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.LampType FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Common.LampType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Manufacturer
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.LampType()
                {
                Manufacturer = select.Manufacturer
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ServerVersion
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.LaunchedServerVersion()
                {
                ServerVersion = sel.ServerVersion
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.LaunchedServerVersion FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ServerVersion
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.LaunchedServerVersion()
                {
                ServerVersion = select.ServerVersion
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ServerVersion
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Common.LaunchedServerVersion()
                {
                ServerVersion = sel.ServerVersion
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Common.LaunchedServerVersion FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Common.LaunchedServerVersion> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ServerVersion
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Common.LaunchedServerVersion()
                {
                ServerVersion = select.ServerVersion
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.CallType> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.CallType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CallNumber
,                sel.EnabledForDisplay
,                sel.Description
,                sel.AlwaysEnabledForDisplay
,                sel.CallQuantityType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.CallType()
                {
                CallNumber = sel.CallNumber
,                EnabledForDisplay = sel.EnabledForDisplay
,                Description = sel.Description
,                AlwaysEnabledForDisplay = sel.AlwaysEnabledForDisplay
,                CallQuantityType = sel.CallQuantityType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.CallType FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.CallType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CallNumber
,                sel.EnabledForDisplay
,                sel.Description
,                sel.AlwaysEnabledForDisplay
,                sel.CallQuantityType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.CallType()
                {
                CallNumber = select.CallNumber
,                EnabledForDisplay = select.EnabledForDisplay
,                Description = select.Description
,                AlwaysEnabledForDisplay = select.AlwaysEnabledForDisplay
,                CallQuantityType = select.CallQuantityType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.CallType> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.CallType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CallNumber
,                sel.EnabledForDisplay
,                sel.Description
,                sel.AlwaysEnabledForDisplay
,                sel.CallQuantityType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.CallType()
                {
                CallNumber = sel.CallNumber
,                EnabledForDisplay = sel.EnabledForDisplay
,                Description = sel.Description
,                AlwaysEnabledForDisplay = sel.AlwaysEnabledForDisplay
,                CallQuantityType = sel.CallQuantityType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.CallType FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.CallType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CallNumber
,                sel.EnabledForDisplay
,                sel.Description
,                sel.AlwaysEnabledForDisplay
,                sel.CallQuantityType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.CallType()
                {
                CallNumber = select.CallNumber
,                EnabledForDisplay = select.EnabledForDisplay
,                Description = select.Description
,                AlwaysEnabledForDisplay = select.AlwaysEnabledForDisplay
,                CallQuantityType = select.CallQuantityType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CommandType
,                sel.AlarmNumber
,                sel.Label
,                sel.DeviceType
,                sel.CallSystem
,                sel.Description
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand()
                {
                CommandType = sel.CommandType
,                AlarmNumber = sel.AlarmNumber
,                Label = sel.Label
,                DeviceType = sel.DeviceType
,                CallSystem = sel.CallSystem
,                Description = sel.Description
,                CallerName = sel.CallerName
,                DateTime = sel.DateTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CommandType
,                sel.AlarmNumber
,                sel.Label
,                sel.DeviceType
,                sel.CallSystem
,                sel.Description
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand()
                {
                CommandType = select.CommandType
,                AlarmNumber = select.AlarmNumber
,                Label = select.Label
,                DeviceType = select.DeviceType
,                CallSystem = select.CallSystem
,                Description = select.Description
,                CallerName = select.CallerName
,                DateTime = select.DateTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CommandType
,                sel.AlarmNumber
,                sel.Label
,                sel.DeviceType
,                sel.CallSystem
,                sel.Description
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand()
                {
                CommandType = sel.CommandType
,                AlarmNumber = sel.AlarmNumber
,                Label = sel.Label
,                DeviceType = sel.DeviceType
,                CallSystem = sel.CallSystem
,                Description = sel.Description
,                CallerName = sel.CallerName
,                DateTime = sel.DateTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.CommandType
,                sel.AlarmNumber
,                sel.Label
,                sel.DeviceType
,                sel.CallSystem
,                sel.Description
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.DispatcherCommand()
                {
                CommandType = select.CommandType
,                AlarmNumber = select.AlarmNumber
,                Label = select.Label
,                DeviceType = select.DeviceType
,                CallSystem = select.CallSystem
,                Description = select.Description
,                CallerName = select.CallerName
,                DateTime = select.DateTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Vibration
,                sel.Text
,                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.PagerChannelType
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand()
                {
                Vibration = sel.Vibration
,                Text = sel.Text
,                RepeatUntilConfirm = sel.RepeatUntilConfirm
,                SignalTime = sel.SignalTime
,                PauseTime = sel.PauseTime
,                PagerChannelType = sel.PagerChannelType
,                CallerName = sel.CallerName
,                DateTime = sel.DateTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Vibration
,                sel.Text
,                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.PagerChannelType
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand()
                {
                Vibration = select.Vibration
,                Text = select.Text
,                RepeatUntilConfirm = select.RepeatUntilConfirm
,                SignalTime = select.SignalTime
,                PauseTime = select.PauseTime
,                PagerChannelType = select.PagerChannelType
,                CallerName = select.CallerName
,                DateTime = select.DateTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Vibration
,                sel.Text
,                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.PagerChannelType
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand()
                {
                Vibration = sel.Vibration
,                Text = sel.Text
,                RepeatUntilConfirm = sel.RepeatUntilConfirm
,                SignalTime = sel.SignalTime
,                PauseTime = sel.PauseTime
,                PagerChannelType = sel.PagerChannelType
,                CallerName = sel.CallerName
,                DateTime = sel.DateTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Vibration
,                sel.Text
,                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.PagerChannelType
,                sel.CallerName
,                sel.DateTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.CommandAndCalls.PagerSendCommand()
                {
                Vibration = select.Vibration
,                Text = select.Text
,                RepeatUntilConfirm = select.RepeatUntilConfirm
,                SignalTime = select.SignalTime
,                PauseTime = select.PauseTime
,                PagerChannelType = select.PagerChannelType
,                CallerName = select.CallerName
,                DateTime = select.DateTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.AckEvent> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.AckEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Ip4Address
,                sel.Username
,                sel.RoleName
,                sel.EventType
,                sel.EventDescription
,                sel.EventPriorityId
,                sel.EventPriorityType
,                sel.ClientRecieved
,                sel.ClientAck
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.AckEvent()
                {
                Ip4Address = sel.Ip4Address
,                Username = sel.Username
,                RoleName = sel.RoleName
,                EventType = sel.EventType
,                EventDescription = sel.EventDescription
,                EventPriorityId = sel.EventPriorityId
,                EventPriorityType = sel.EventPriorityType
,                ClientRecieved = sel.ClientRecieved
,                ClientAck = sel.ClientAck
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.AckEvent FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.AckEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Ip4Address
,                sel.Username
,                sel.RoleName
,                sel.EventType
,                sel.EventDescription
,                sel.EventPriorityId
,                sel.EventPriorityType
,                sel.ClientRecieved
,                sel.ClientAck
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.AckEvent()
                {
                Ip4Address = select.Ip4Address
,                Username = select.Username
,                RoleName = select.RoleName
,                EventType = select.EventType
,                EventDescription = select.EventDescription
,                EventPriorityId = select.EventPriorityId
,                EventPriorityType = select.EventPriorityType
,                ClientRecieved = select.ClientRecieved
,                ClientAck = select.ClientAck
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.AckEvent> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.AckEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Ip4Address
,                sel.Username
,                sel.RoleName
,                sel.EventType
,                sel.EventDescription
,                sel.EventPriorityId
,                sel.EventPriorityType
,                sel.ClientRecieved
,                sel.ClientAck
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.AckEvent()
                {
                Ip4Address = sel.Ip4Address
,                Username = sel.Username
,                RoleName = sel.RoleName
,                EventType = sel.EventType
,                EventDescription = sel.EventDescription
,                EventPriorityId = sel.EventPriorityId
,                EventPriorityType = sel.EventPriorityType
,                ClientRecieved = sel.ClientRecieved
,                ClientAck = sel.ClientAck
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.AckEvent FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.AckEvent> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Ip4Address
,                sel.Username
,                sel.RoleName
,                sel.EventType
,                sel.EventDescription
,                sel.EventPriorityId
,                sel.EventPriorityType
,                sel.ClientRecieved
,                sel.ClientAck
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.AckEvent()
                {
                Ip4Address = select.Ip4Address
,                Username = select.Username
,                RoleName = select.RoleName
,                EventType = select.EventType
,                EventDescription = select.EventDescription
,                EventPriorityId = select.EventPriorityId
,                EventPriorityType = select.EventPriorityType
,                ClientRecieved = select.ClientRecieved
,                ClientAck = select.ClientAck
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.CrossCatalog> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalog> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.CrossCatalog()
                {
                Entity = sel.Entity
,                ExternalId = sel.ExternalId
,                InternalId = sel.InternalId
,                ExternalSystem = sel.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)sel.ExternalSystemId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.CrossCatalog FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalog> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.CrossCatalog()
                {
                Entity = select.Entity
,                ExternalId = select.ExternalId
,                InternalId = select.InternalId
,                ExternalSystem = select.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)select.ExternalSystemId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.CrossCatalog> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalog> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id,
                ExternalSystemName = sel.ExternalSystem == null ? (string)null : sel.ExternalSystem.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.CrossCatalog()
                {
                Entity = sel.Entity
,                ExternalId = sel.ExternalId
,                InternalId = sel.InternalId
,                ExternalSystem = sel.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)sel.ExternalSystemId, Name = (string)sel.ExternalSystemName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.CrossCatalog FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalog> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id,
                ExternalSystemName = sel.ExternalSystem == null ? (string)null : sel.ExternalSystem.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.CrossCatalog()
                {
                Entity = select.Entity
,                ExternalId = select.ExternalId
,                InternalId = select.InternalId
,                ExternalSystem = select.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)select.ExternalSystemId, Name = (string)select.ExternalSystemName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.ExternalGuid
,                sel.RedirectExternalGuid
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.CrossCatalogEx()
                {
                Entity = sel.Entity
,                ExternalId = sel.ExternalId
,                ExternalGuid = sel.ExternalGuid
,                RedirectExternalGuid = sel.RedirectExternalGuid
,                InternalId = sel.InternalId
,                ExternalSystem = sel.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)sel.ExternalSystemId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.CrossCatalogEx FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.ExternalGuid
,                sel.RedirectExternalGuid
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.CrossCatalogEx()
                {
                Entity = select.Entity
,                ExternalId = select.ExternalId
,                ExternalGuid = select.ExternalGuid
,                RedirectExternalGuid = select.RedirectExternalGuid
,                InternalId = select.InternalId
,                ExternalSystem = select.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)select.ExternalSystemId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.ExternalGuid
,                sel.RedirectExternalGuid
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id,
                ExternalSystemName = sel.ExternalSystem == null ? (string)null : sel.ExternalSystem.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.CrossCatalogEx()
                {
                Entity = sel.Entity
,                ExternalId = sel.ExternalId
,                ExternalGuid = sel.ExternalGuid
,                RedirectExternalGuid = sel.RedirectExternalGuid
,                InternalId = sel.InternalId
,                ExternalSystem = sel.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)sel.ExternalSystemId, Name = (string)sel.ExternalSystemName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.CrossCatalogEx FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.CrossCatalogEx> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Entity
,                sel.ExternalId
,                sel.ExternalGuid
,                sel.RedirectExternalGuid
,                sel.InternalId
,                ExternalSystemId = sel.ExternalSystem == null ? (long?)null : sel.ExternalSystem.Id,
                ExternalSystemName = sel.ExternalSystem == null ? (string)null : sel.ExternalSystem.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.CrossCatalogEx()
                {
                Entity = select.Entity
,                ExternalId = select.ExternalId
,                ExternalGuid = select.ExternalGuid
,                RedirectExternalGuid = select.RedirectExternalGuid
,                InternalId = select.InternalId
,                ExternalSystem = select.ExternalSystemId == null? null : new Utis.Minex.ProductionModel.Catalog.ExternalSystem { Id = (long)select.ExternalSystemId, Name = (string)select.ExternalSystemName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.DowntimeType> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.DowntimeType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DowntimeTypeId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.DowntimeType()
                {
                DowntimeTypeId = sel.DowntimeTypeId
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.DowntimeType FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.DowntimeType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DowntimeTypeId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.DowntimeType()
                {
                DowntimeTypeId = select.DowntimeTypeId
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.DowntimeType> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.DowntimeType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DowntimeTypeId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.DowntimeType()
                {
                DowntimeTypeId = sel.DowntimeTypeId
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.DowntimeType FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.DowntimeType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.DowntimeTypeId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.DowntimeType()
                {
                DowntimeTypeId = select.DowntimeTypeId
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Duration> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Duration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Value
,                sel.DurationType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Duration()
                {
                Value = sel.Value
,                DurationType = sel.DurationType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Duration FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Duration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Value
,                sel.DurationType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Duration()
                {
                Value = select.Value
,                DurationType = select.DurationType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Duration> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Duration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Value
,                sel.DurationType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Duration()
                {
                Value = sel.Value
,                DurationType = sel.DurationType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Duration FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Duration> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Value
,                sel.DurationType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Duration()
                {
                Value = select.Value
,                DurationType = select.DurationType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ExternalSystem> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ExternalSystem> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ExternalSystem()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ExternalSystem FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.ExternalSystem> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ExternalSystem()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ExternalSystem> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ExternalSystem> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ExternalSystem()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ExternalSystem FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.ExternalSystem> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ExternalSystem()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointMovementJournalId = sel.MarkPointMovementJournal == null ? (long?)null : sel.MarkPointMovementJournal.Id
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.MarkPointPlace()
                {
                MarkPointMovementJournal = sel.MarkPointMovementJournalId == null? null : new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal { Id = (long)sel.MarkPointMovementJournalId }
,                Working = sel.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingId }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.MarkPointPlace FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointMovementJournalId = sel.MarkPointMovementJournal == null ? (long?)null : sel.MarkPointMovementJournal.Id
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.MarkPointPlace()
                {
                MarkPointMovementJournal = select.MarkPointMovementJournalId == null? null : new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal { Id = (long)select.MarkPointMovementJournalId }
,                Working = select.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingId }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.MarkPointMovementJournal
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id,
                WorkingName = sel.Working == null ? (string)null : sel.Working.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.MarkPointPlace()
                {
                MarkPointMovementJournal = sel.MarkPointMovementJournal
,                Working = sel.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)sel.WorkingId, Name = (string)sel.WorkingName }
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.MarkPointPlace FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.MarkPointPlace> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                MarkPointMovementJournalId = sel.MarkPointMovementJournal == null ? (long?)null : sel.MarkPointMovementJournal.Id
,                WorkingId = sel.Working == null ? (long?)null : sel.Working.Id,
                WorkingName = sel.Working == null ? (string)null : sel.Working.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.MarkPointPlace()
                {
                MarkPointMovementJournal = select.MarkPointMovementJournalId == null? null : new Utis.Minex.ProductionModel.Journals.MarkPointMovementJournal { Id = (long)select.MarkPointMovementJournalId }
,                Working = select.WorkingId == null? null : new Utis.Minex.ProductionModel.MineSpace.MineModel.Working { Id = (long)select.WorkingId, Name = (string)select.WorkingName }
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ObjectRaw> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ObjectRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                ObjectParentId = sel.ObjectParent == null ? (long?)null : sel.ObjectParent.Id
,                sel.FileExtension
,                sel.IsArchive
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ObjectRaw()
                {
                Data = sel.Data
,                ObjectParent = sel.ObjectParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)sel.ObjectParentId }
,                FileExtension = sel.FileExtension
,                IsArchive = sel.IsArchive
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ObjectRaw FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.ObjectRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                ObjectParentId = sel.ObjectParent == null ? (long?)null : sel.ObjectParent.Id
,                sel.FileExtension
,                sel.IsArchive
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ObjectRaw()
                {
                Data = select.Data
,                ObjectParent = select.ObjectParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)select.ObjectParentId }
,                FileExtension = select.FileExtension
,                IsArchive = select.IsArchive
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ObjectRaw> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ObjectRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                ObjectParentId = sel.ObjectParent == null ? (long?)null : sel.ObjectParent.Id,
                ObjectParentName = sel.ObjectParent == null ? (string)null : sel.ObjectParent.Name
,                sel.FileExtension
,                sel.IsArchive
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ObjectRaw()
                {
                Data = sel.Data
,                ObjectParent = sel.ObjectParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)sel.ObjectParentId, Name = (string)sel.ObjectParentName }
,                FileExtension = sel.FileExtension
,                IsArchive = sel.IsArchive
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ObjectRaw FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.ObjectRaw> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Data
,                ObjectParentId = sel.ObjectParent == null ? (long?)null : sel.ObjectParent.Id,
                ObjectParentName = sel.ObjectParent == null ? (string)null : sel.ObjectParent.Name
,                sel.FileExtension
,                sel.IsArchive
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ObjectRaw()
                {
                Data = select.Data
,                ObjectParent = select.ObjectParentId == null? null : new Utis.Minex.ProductionModel.Graphical.GraphicalObject { Id = (long)select.ObjectParentId, Name = (string)select.ObjectParentName }
,                FileExtension = select.FileExtension
,                IsArchive = select.IsArchive
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.PagerSettings> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.PagerSettings()
                {
                RepeatUntilConfirm = sel.RepeatUntilConfirm
,                SignalTime = sel.SignalTime
,                PauseTime = sel.PauseTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.PagerSettings FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.PagerSettings()
                {
                RepeatUntilConfirm = select.RepeatUntilConfirm
,                SignalTime = select.SignalTime
,                PauseTime = select.PauseTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.PagerSettings> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.PagerSettings()
                {
                RepeatUntilConfirm = sel.RepeatUntilConfirm
,                SignalTime = sel.SignalTime
,                PauseTime = sel.PauseTime
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.PagerSettings FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerSettings> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.RepeatUntilConfirm
,                sel.SignalTime
,                sel.PauseTime
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.PagerSettings()
                {
                RepeatUntilConfirm = select.RepeatUntilConfirm
,                SignalTime = select.SignalTime
,                PauseTime = select.PauseTime
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.PagerText> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerText> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.PagerText()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.PagerText FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerText> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.PagerText()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.PagerText> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerText> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.PagerText()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.PagerText FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.PagerText> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.PagerText()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.RailCarType> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.RailCarType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Volume
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.RailCarType()
                {
                Volume = sel.Volume
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.RailCarType FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.RailCarType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Volume
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.RailCarType()
                {
                Volume = select.Volume
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.RailCarType> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.RailCarType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Volume
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.RailCarType()
                {
                Volume = sel.Volume
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.RailCarType FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.RailCarType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Volume
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.RailCarType()
                {
                Volume = select.Volume
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ReasonDowntimeId
,                DowntimeTypeId = sel.DowntimeType == null ? (long?)null : sel.DowntimeType.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ReasonDowntime()
                {
                ReasonDowntimeId = sel.ReasonDowntimeId
,                DowntimeType = sel.DowntimeTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.DowntimeType { Id = (long)sel.DowntimeTypeId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ReasonDowntime FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ReasonDowntimeId
,                DowntimeTypeId = sel.DowntimeType == null ? (long?)null : sel.DowntimeType.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ReasonDowntime()
                {
                ReasonDowntimeId = select.ReasonDowntimeId
,                DowntimeType = select.DowntimeTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.DowntimeType { Id = (long)select.DowntimeTypeId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ReasonDowntimeId
,                DowntimeTypeId = sel.DowntimeType == null ? (long?)null : sel.DowntimeType.Id,
                DowntimeTypeName = sel.DowntimeType == null ? (string)null : sel.DowntimeType.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ReasonDowntime()
                {
                ReasonDowntimeId = sel.ReasonDowntimeId
,                DowntimeType = sel.DowntimeTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.DowntimeType { Id = (long)sel.DowntimeTypeId, Name = (string)sel.DowntimeTypeName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ReasonDowntime FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.ReasonDowntime> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ReasonDowntimeId
,                DowntimeTypeId = sel.DowntimeType == null ? (long?)null : sel.DowntimeType.Id,
                DowntimeTypeName = sel.DowntimeType == null ? (string)null : sel.DowntimeType.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ReasonDowntime()
                {
                ReasonDowntimeId = select.ReasonDowntimeId
,                DowntimeType = select.DowntimeTypeId == null? null : new Utis.Minex.ProductionModel.Catalog.DowntimeType { Id = (long)select.DowntimeTypeId, Name = (string)select.DowntimeTypeName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Transport> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Transport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                TransportModelId = sel.TransportModel == null ? (long?)null : sel.TransportModel.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                LocationDivisionId = sel.LocationDivision == null ? (long?)null : sel.LocationDivision.Id
,                sel.InvNumber
,                sel.SerNumber
,                sel.Number
,                sel.SapTransportId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Transport()
                {
                ShortName = sel.ShortName
,                TransportModel = sel.TransportModelId == null? null : new Utis.Minex.ProductionModel.Catalog.TransportModel { Id = (long)sel.TransportModelId }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                LocationDivision = sel.LocationDivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.LocationDivisionId }
,                InvNumber = sel.InvNumber
,                SerNumber = sel.SerNumber
,                Number = sel.Number
,                SapTransportId = sel.SapTransportId
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Transport FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Transport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                TransportModelId = sel.TransportModel == null ? (long?)null : sel.TransportModel.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                LocationDivisionId = sel.LocationDivision == null ? (long?)null : sel.LocationDivision.Id
,                sel.InvNumber
,                sel.SerNumber
,                sel.Number
,                sel.SapTransportId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Transport()
                {
                ShortName = select.ShortName
,                TransportModel = select.TransportModelId == null? null : new Utis.Minex.ProductionModel.Catalog.TransportModel { Id = (long)select.TransportModelId }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                LocationDivision = select.LocationDivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.LocationDivisionId }
,                InvNumber = select.InvNumber
,                SerNumber = select.SerNumber
,                Number = select.Number
,                SapTransportId = select.SapTransportId
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Transport> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Transport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                TransportModelId = sel.TransportModel == null ? (long?)null : sel.TransportModel.Id,
                TransportModelName = sel.TransportModel == null ? (string)null : sel.TransportModel.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                LocationDivisionId = sel.LocationDivision == null ? (long?)null : sel.LocationDivision.Id,
                LocationDivisionName = sel.LocationDivision == null ? (string)null : sel.LocationDivision.Name
,                sel.InvNumber
,                sel.SerNumber
,                sel.Number
,                sel.SapTransportId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Transport()
                {
                ShortName = sel.ShortName
,                TransportModel = sel.TransportModelId == null? null : new Utis.Minex.ProductionModel.Catalog.TransportModel { Id = (long)sel.TransportModelId, Name = (string)sel.TransportModelName }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                LocationDivision = sel.LocationDivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.LocationDivisionId, Name = (string)sel.LocationDivisionName }
,                InvNumber = sel.InvNumber
,                SerNumber = sel.SerNumber
,                Number = sel.Number
,                SapTransportId = sel.SapTransportId
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Transport FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Transport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                TransportModelId = sel.TransportModel == null ? (long?)null : sel.TransportModel.Id,
                TransportModelName = sel.TransportModel == null ? (string)null : sel.TransportModel.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                LocationDivisionId = sel.LocationDivision == null ? (long?)null : sel.LocationDivision.Id,
                LocationDivisionName = sel.LocationDivision == null ? (string)null : sel.LocationDivision.Name
,                sel.InvNumber
,                sel.SerNumber
,                sel.Number
,                sel.SapTransportId
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Transport()
                {
                ShortName = select.ShortName
,                TransportModel = select.TransportModelId == null? null : new Utis.Minex.ProductionModel.Catalog.TransportModel { Id = (long)select.TransportModelId, Name = (string)select.TransportModelName }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                LocationDivision = select.LocationDivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.LocationDivisionId, Name = (string)select.LocationDivisionName }
,                InvNumber = select.InvNumber
,                SerNumber = select.SerNumber
,                Number = select.Number
,                SapTransportId = select.SapTransportId
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.TransportModel> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.TransportModel> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TransportModelType
,                sel.ShortName
,                VendorId = sel.Vendor == null ? (long?)null : sel.Vendor.Id
,                sel.TransportType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.TransportModel()
                {
                TransportModelType = sel.TransportModelType
,                ShortName = sel.ShortName
,                Vendor = sel.VendorId == null? null : new Utis.Minex.ProductionModel.Catalog.Vendor { Id = (long)sel.VendorId }
,                TransportType = sel.TransportType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.TransportModel FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.TransportModel> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TransportModelType
,                sel.ShortName
,                VendorId = sel.Vendor == null ? (long?)null : sel.Vendor.Id
,                sel.TransportType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.TransportModel()
                {
                TransportModelType = select.TransportModelType
,                ShortName = select.ShortName
,                Vendor = select.VendorId == null? null : new Utis.Minex.ProductionModel.Catalog.Vendor { Id = (long)select.VendorId }
,                TransportType = select.TransportType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.TransportModel> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.TransportModel> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TransportModelType
,                sel.ShortName
,                VendorId = sel.Vendor == null ? (long?)null : sel.Vendor.Id,
                VendorName = sel.Vendor == null ? (string)null : sel.Vendor.Name
,                sel.TransportType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.TransportModel()
                {
                TransportModelType = sel.TransportModelType
,                ShortName = sel.ShortName
,                Vendor = sel.VendorId == null? null : new Utis.Minex.ProductionModel.Catalog.Vendor { Id = (long)sel.VendorId, Name = (string)sel.VendorName }
,                TransportType = sel.TransportType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.TransportModel FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.TransportModel> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.TransportModelType
,                sel.ShortName
,                VendorId = sel.Vendor == null ? (long?)null : sel.Vendor.Id,
                VendorName = sel.Vendor == null ? (string)null : sel.Vendor.Name
,                sel.TransportType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.TransportModel()
                {
                TransportModelType = select.TransportModelType
,                ShortName = select.ShortName
,                Vendor = select.VendorId == null? null : new Utis.Minex.ProductionModel.Catalog.Vendor { Id = (long)select.VendorId, Name = (string)select.VendorName }
,                TransportType = select.TransportType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Vendor> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Vendor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Vendor()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Vendor FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Vendor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Vendor()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Vendor> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Vendor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Vendor()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Vendor FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Vendor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Vendor()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ZoneResponsibility FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ZoneResponsibility FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneResponsibility> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ZoneResponsibility()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ZoneType> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ZoneType()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ZoneType FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ZoneType()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.ZoneType> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.ZoneType()
                {
                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.ZoneType FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.ZoneType> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.ZoneType()
                {
                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Division> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Division> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionParentId = sel.DivisionParent == null ? (long?)null : sel.DivisionParent.Id
,                sel.DivisionCategory
,                sel.IsMainDivision
,                sel.IsFromIntegration
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Division()
                {
                DivisionParent = sel.DivisionParentId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionParentId }
,                DivisionCategory = sel.DivisionCategory
,                IsMainDivision = sel.IsMainDivision
,                IsFromIntegration = sel.IsFromIntegration
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Division FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Division> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionParentId = sel.DivisionParent == null ? (long?)null : sel.DivisionParent.Id
,                sel.DivisionCategory
,                sel.IsMainDivision
,                sel.IsFromIntegration
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Division()
                {
                DivisionParent = select.DivisionParentId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionParentId }
,                DivisionCategory = select.DivisionCategory
,                IsMainDivision = select.IsMainDivision
,                IsFromIntegration = select.IsFromIntegration
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Division> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Division> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionParentId = sel.DivisionParent == null ? (long?)null : sel.DivisionParent.Id,
                DivisionParentName = sel.DivisionParent == null ? (string)null : sel.DivisionParent.Name
,                sel.DivisionCategory
,                sel.IsMainDivision
,                sel.IsFromIntegration
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Division()
                {
                DivisionParent = sel.DivisionParentId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionParentId, Name = (string)sel.DivisionParentName }
,                DivisionCategory = sel.DivisionCategory
,                IsMainDivision = sel.IsMainDivision
,                IsFromIntegration = sel.IsFromIntegration
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId, Name = (string)sel.ShiftModeName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Division FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Division> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionParentId = sel.DivisionParent == null ? (long?)null : sel.DivisionParent.Id,
                DivisionParentName = sel.DivisionParent == null ? (string)null : sel.DivisionParent.Name
,                sel.DivisionCategory
,                sel.IsMainDivision
,                sel.IsFromIntegration
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Division()
                {
                DivisionParent = select.DivisionParentId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionParentId, Name = (string)select.DivisionParentName }
,                DivisionCategory = select.DivisionCategory
,                IsMainDivision = select.IsMainDivision
,                IsFromIntegration = select.IsFromIntegration
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId, Name = (string)select.ShiftModeName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                sel.JobCategory
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle()
                {
                ShortName = sel.ShortName
,                JobCategory = sel.JobCategory
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JobTitle FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                sel.JobCategory
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle()
                {
                ShortName = select.ShortName
,                JobCategory = select.JobCategory
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                sel.JobCategory
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle()
                {
                ShortName = sel.ShortName
,                JobCategory = sel.JobCategory
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JobTitle FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitle> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.ShortName
,                sel.JobCategory
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle()
                {
                ShortName = select.ShortName
,                JobCategory = select.JobCategory
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                DurationId = sel.Duration == null ? (long?)null : sel.Duration.Id
,                sel.AdmissionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission()
                {
                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId }
,                Duration = sel.DurationId == null? null : new Utis.Minex.ProductionModel.Catalog.Duration { Id = (long)sel.DurationId }
,                AdmissionType = sel.AdmissionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                DurationId = sel.Duration == null ? (long?)null : sel.Duration.Id
,                sel.AdmissionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission()
                {
                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId }
,                Duration = select.DurationId == null? null : new Utis.Minex.ProductionModel.Catalog.Duration { Id = (long)select.DurationId }
,                AdmissionType = select.AdmissionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                DurationId = sel.Duration == null ? (long?)null : sel.Duration.Id,
                DurationName = sel.Duration == null ? (string)null : sel.Duration.Name
,                sel.AdmissionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission()
                {
                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId, Name = (string)sel.JobTitleName }
,                Duration = sel.DurationId == null? null : new Utis.Minex.ProductionModel.Catalog.Duration { Id = (long)sel.DurationId, Name = (string)sel.DurationName }
,                AdmissionType = sel.AdmissionType
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                DurationId = sel.Duration == null ? (long?)null : sel.Duration.Id,
                DurationName = sel.Duration == null ? (string)null : sel.Duration.Name
,                sel.AdmissionType
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JobTitleAdmission()
                {
                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId, Name = (string)select.JobTitleName }
,                Duration = select.DurationId == null? null : new Utis.Minex.ProductionModel.Catalog.Duration { Id = (long)select.DurationId, Name = (string)select.DurationName }
,                AdmissionType = select.AdmissionType
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.LabelsFrom
,                sel.LabelsTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                LabelsFrom = sel.LabelsFrom
,                LabelsTo = sel.LabelsTo
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.LabelsFrom
,                sel.LabelsTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                LabelsFrom = select.LabelsFrom
,                LabelsTo = select.LabelsTo
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.LabelsFrom
,                sel.LabelsTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                LabelsFrom = sel.LabelsFrom
,                LabelsTo = sel.LabelsTo
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.LabelsFrom
,                sel.LabelsTo
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.JoinedMine()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                LabelsFrom = select.LabelsFrom
,                LabelsTo = select.LabelsTo
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PayrollByLampIssueDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Person> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Person> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Lastname
,                sel.Firstname
,                sel.Middlename
,                sel.BirthDate
,                sel.Sex
,                sel.Tabnum
,                sel.FireDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                sel.Rank
,                PhotoId = sel.Photo == null ? (long?)null : sel.Photo.Id
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Person()
                {
                Lastname = sel.Lastname
,                Firstname = sel.Firstname
,                Middlename = sel.Middlename
,                BirthDate = sel.BirthDate
,                Sex = sel.Sex
,                Tabnum = sel.Tabnum
,                FireDate = sel.FireDate
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId }
,                Rank = sel.Rank
,                Photo = sel.PhotoId == null? null : new Utis.Minex.ProductionModel.Catalog.ObjectRaw { Id = (long)sel.PhotoId }
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Person FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Person> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Lastname
,                sel.Firstname
,                sel.Middlename
,                sel.BirthDate
,                sel.Sex
,                sel.Tabnum
,                sel.FireDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                sel.Rank
,                PhotoId = sel.Photo == null ? (long?)null : sel.Photo.Id
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Person()
                {
                Lastname = select.Lastname
,                Firstname = select.Firstname
,                Middlename = select.Middlename
,                BirthDate = select.BirthDate
,                Sex = select.Sex
,                Tabnum = select.Tabnum
,                FireDate = select.FireDate
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId }
,                Rank = select.Rank
,                Photo = select.PhotoId == null? null : new Utis.Minex.ProductionModel.Catalog.ObjectRaw { Id = (long)select.PhotoId }
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Person> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Person> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Lastname
,                sel.Firstname
,                sel.Middlename
,                sel.BirthDate
,                sel.Sex
,                sel.Tabnum
,                sel.FireDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                sel.Rank
,                PhotoId = sel.Photo == null ? (long?)null : sel.Photo.Id,
                PhotoName = sel.Photo == null ? (string)null : sel.Photo.Name
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Person()
                {
                Lastname = sel.Lastname
,                Firstname = sel.Firstname
,                Middlename = sel.Middlename
,                BirthDate = sel.BirthDate
,                Sex = sel.Sex
,                Tabnum = sel.Tabnum
,                FireDate = sel.FireDate
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId, Name = (string)sel.JobTitleName }
,                Rank = sel.Rank
,                Photo = sel.PhotoId == null? null : new Utis.Minex.ProductionModel.Catalog.ObjectRaw { Id = (long)sel.PhotoId, Name = (string)sel.PhotoName }
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId, Name = (string)sel.ShiftModeName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Person FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Person> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Lastname
,                sel.Firstname
,                sel.Middlename
,                sel.BirthDate
,                sel.Sex
,                sel.Tabnum
,                sel.FireDate
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                sel.Rank
,                PhotoId = sel.Photo == null ? (long?)null : sel.Photo.Id,
                PhotoName = sel.Photo == null ? (string)null : sel.Photo.Name
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Person()
                {
                Lastname = select.Lastname
,                Firstname = select.Firstname
,                Middlename = select.Middlename
,                BirthDate = select.BirthDate
,                Sex = select.Sex
,                Tabnum = select.Tabnum
,                FireDate = select.FireDate
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId, Name = (string)select.JobTitleName }
,                Rank = select.Rank
,                Photo = select.PhotoId == null? null : new Utis.Minex.ProductionModel.Catalog.ObjectRaw { Id = (long)select.PhotoId, Name = (string)select.PhotoName }
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId, Name = (string)select.ShiftModeName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.HandlerType
,                sel.CardNumber
,                sel.CardType
,                sel.CardStatus
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard()
                {
                Number = sel.Number
,                HandlerType = sel.HandlerType
,                CardNumber = sel.CardNumber
,                CardType = sel.CardType
,                CardStatus = sel.CardStatus
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.HandlerType
,                sel.CardNumber
,                sel.CardType
,                sel.CardStatus
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard()
                {
                Number = select.Number
,                HandlerType = select.HandlerType
,                CardNumber = select.CardNumber
,                CardType = select.CardType
,                CardStatus = select.CardStatus
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.HandlerType
,                sel.CardNumber
,                sel.CardType
,                sel.CardStatus
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard()
                {
                Number = sel.Number
,                HandlerType = sel.HandlerType
,                CardNumber = sel.CardNumber
,                CardType = sel.CardType
,                CardStatus = sel.CardStatus
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                sel.HandlerType
,                sel.CardNumber
,                sel.CardType
,                sel.CardStatus
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PersonalCard()
                {
                Number = select.Number
,                HandlerType = select.HandlerType
,                CardNumber = select.CardNumber
,                CardType = select.CardType
,                CardStatus = select.CardStatus
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BeginDate
,                sel.EndDate
,                MentorId = sel.Mentor == null ? (long?)null : sel.Mentor.Id
,                InstructorId = sel.Instructor == null ? (long?)null : sel.Instructor.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee()
                {
                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                Mentor = sel.MentorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)sel.MentorId }
,                Instructor = sel.InstructorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)sel.InstructorId }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BeginDate
,                sel.EndDate
,                MentorId = sel.Mentor == null ? (long?)null : sel.Mentor.Id
,                InstructorId = sel.Instructor == null ? (long?)null : sel.Instructor.Id
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee()
                {
                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                Mentor = select.MentorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)select.MentorId }
,                Instructor = select.InstructorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)select.InstructorId }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BeginDate
,                sel.EndDate
,                MentorId = sel.Mentor == null ? (long?)null : sel.Mentor.Id,
                MentorName = sel.Mentor == null ? (string)null : sel.Mentor.Name
,                InstructorId = sel.Instructor == null ? (long?)null : sel.Instructor.Id,
                InstructorName = sel.Instructor == null ? (string)null : sel.Instructor.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee()
                {
                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                Mentor = sel.MentorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)sel.MentorId, Name = (string)sel.MentorName }
,                Instructor = sel.InstructorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)sel.InstructorId, Name = (string)sel.InstructorName }
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.BeginDate
,                sel.EndDate
,                MentorId = sel.Mentor == null ? (long?)null : sel.Mentor.Id,
                MentorName = sel.Mentor == null ? (string)null : sel.Mentor.Name
,                InstructorId = sel.Instructor == null ? (long?)null : sel.Instructor.Id,
                InstructorName = sel.Instructor == null ? (string)null : sel.Instructor.Name
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.PersonTrainee()
                {
                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                Mentor = select.MentorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)select.MentorId, Name = (string)select.MentorName }
,                Instructor = select.InstructorId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor { Id = (long)select.InstructorId, Name = (string)select.InstructorName }
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Shift> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Shift> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Duration
,                sel.LampGiveOutBegin
,                sel.MineEnterBegin
,                sel.MineEnterEnd
,                sel.ShiftBegin
,                sel.ShiftEnd
,                sel.MineLeaveBegin
,                sel.MineLeaveEnd
,                sel.LampTurnInEnd
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Shift()
                {
                Number = sel.Number
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId }
,                Duration = sel.Duration
,                LampGiveOutBegin = sel.LampGiveOutBegin
,                MineEnterBegin = sel.MineEnterBegin
,                MineEnterEnd = sel.MineEnterEnd
,                ShiftBegin = sel.ShiftBegin
,                ShiftEnd = sel.ShiftEnd
,                MineLeaveBegin = sel.MineLeaveBegin
,                MineLeaveEnd = sel.MineLeaveEnd
,                LampTurnInEnd = sel.LampTurnInEnd
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Shift FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Shift> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Duration
,                sel.LampGiveOutBegin
,                sel.MineEnterBegin
,                sel.MineEnterEnd
,                sel.ShiftBegin
,                sel.ShiftEnd
,                sel.MineLeaveBegin
,                sel.MineLeaveEnd
,                sel.LampTurnInEnd
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Shift()
                {
                Number = select.Number
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId }
,                Duration = select.Duration
,                LampGiveOutBegin = select.LampGiveOutBegin
,                MineEnterBegin = select.MineEnterBegin
,                MineEnterEnd = select.MineEnterEnd
,                ShiftBegin = select.ShiftBegin
,                ShiftEnd = select.ShiftEnd
,                MineLeaveBegin = select.MineLeaveBegin
,                MineLeaveEnd = select.MineLeaveEnd
,                LampTurnInEnd = select.LampTurnInEnd
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.Shift> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Shift> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Duration
,                sel.LampGiveOutBegin
,                sel.MineEnterBegin
,                sel.MineEnterEnd
,                sel.ShiftBegin
,                sel.ShiftEnd
,                sel.MineLeaveBegin
,                sel.MineLeaveEnd
,                sel.LampTurnInEnd
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.Shift()
                {
                Number = sel.Number
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId, Name = (string)sel.ShiftModeName }
,                Duration = sel.Duration
,                LampGiveOutBegin = sel.LampGiveOutBegin
,                MineEnterBegin = sel.MineEnterBegin
,                MineEnterEnd = sel.MineEnterEnd
,                ShiftBegin = sel.ShiftBegin
,                ShiftEnd = sel.ShiftEnd
,                MineLeaveBegin = sel.MineLeaveBegin
,                MineLeaveEnd = sel.MineLeaveEnd
,                LampTurnInEnd = sel.LampTurnInEnd
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.Shift FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.Shift> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.Number
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Duration
,                sel.LampGiveOutBegin
,                sel.MineEnterBegin
,                sel.MineEnterEnd
,                sel.ShiftBegin
,                sel.ShiftEnd
,                sel.MineLeaveBegin
,                sel.MineLeaveEnd
,                sel.LampTurnInEnd
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.Shift()
                {
                Number = select.Number
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId, Name = (string)select.ShiftModeName }
,                Duration = select.Duration
,                LampGiveOutBegin = select.LampGiveOutBegin
,                MineEnterBegin = select.MineEnterBegin
,                MineEnterEnd = select.MineEnterEnd
,                ShiftBegin = select.ShiftBegin
,                ShiftEnd = select.ShiftEnd
,                MineLeaveBegin = select.MineLeaveBegin
,                MineLeaveEnd = select.MineLeaveEnd
,                LampTurnInEnd = select.LampTurnInEnd
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.IsDefault
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode()
                {
                IsDefault = sel.IsDefault
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.IsDefault
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode()
                {
                IsDefault = select.IsDefault
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.IsDefault
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode()
                {
                IsDefault = sel.IsDefault
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                sel.IsDefault
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode()
                {
                IsDefault = select.IsDefault
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId }
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId }
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision()
                {
                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                JobTitle = sel.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)sel.JobTitleId, Name = (string)sel.JobTitleName }
,                ShiftMode = sel.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)sel.ShiftModeId, Name = (string)sel.ShiftModeName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                JobTitleId = sel.JobTitle == null ? (long?)null : sel.JobTitle.Id,
                JobTitleName = sel.JobTitle == null ? (string)null : sel.JobTitle.Name
,                ShiftModeId = sel.ShiftMode == null ? (long?)null : sel.ShiftMode.Id,
                ShiftModeName = sel.ShiftMode == null ? (string)null : sel.ShiftMode.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.ShiftModeToJobDivision()
                {
                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                JobTitle = select.JobTitleId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.JobTitle { Id = (long)select.JobTitleId, Name = (string)select.JobTitleName }
,                ShiftMode = select.ShiftModeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.ShiftMode { Id = (long)select.ShiftModeId, Name = (string)select.ShiftModeName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TraineeId = sel.Trainee == null ? (long?)null : sel.Trainee.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.OrderNumber
,                sel.MentorshipType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor()
                {
                Trainee = sel.TraineeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.TraineeId }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                OrderNumber = sel.OrderNumber
,                MentorshipType = sel.MentorshipType
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TraineeId = sel.Trainee == null ? (long?)null : sel.Trainee.Id
,                sel.BeginDate
,                sel.EndDate
,                sel.OrderNumber
,                sel.MentorshipType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor()
                {
                Trainee = select.TraineeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.TraineeId }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                OrderNumber = select.OrderNumber
,                MentorshipType = select.MentorshipType
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TraineeId = sel.Trainee == null ? (long?)null : sel.Trainee.Id,
                TraineeName = sel.Trainee == null ? (string)null : sel.Trainee.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.OrderNumber
,                sel.MentorshipType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor()
                {
                Trainee = sel.TraineeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.TraineeId, Name = (string)sel.TraineeName }
,                BeginDate = sel.BeginDate
,                EndDate = sel.EndDate
,                OrderNumber = sel.OrderNumber
,                MentorshipType = sel.MentorshipType
,                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Name = sel.Name
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TraineeId = sel.Trainee == null ? (long?)null : sel.Trainee.Id,
                TraineeName = sel.Trainee == null ? (string)null : sel.Trainee.Name
,                sel.BeginDate
,                sel.EndDate
,                sel.OrderNumber
,                sel.MentorshipType
,                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                sel.Name
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Catalog.Organize.TraineeMentor()
                {
                Trainee = select.TraineeId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.TraineeId, Name = (string)select.TraineeName }
,                BeginDate = select.BeginDate
,                EndDate = select.EndDate
,                OrderNumber = select.OrderNumber
,                MentorshipType = select.MentorshipType
,                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Name = select.Name
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Binds.DeviceBindTransport> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Binds.DeviceBindTransport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.DateIn
,                sel.DateOut
,                sel.IsReserveDevice
,                sel.IsTailDevice
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Binds.DeviceBindTransport()
                {
                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                DateIn = sel.DateIn
,                DateOut = sel.DateOut
,                IsReserveDevice = sel.IsReserveDevice
,                IsTailDevice = sel.IsTailDevice
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Binds.DeviceBindTransport FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Binds.DeviceBindTransport> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                sel.DateIn
,                sel.DateOut
,                sel.IsReserveDevice
,                sel.IsTailDevice
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Binds.DeviceBindTransport()
                {
                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                DateIn = select.DateIn
,                DateOut = select.DateOut
,                IsReserveDevice = select.IsReserveDevice
,                IsTailDevice = select.IsTailDevice
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal> ToRefOnlyIgnoreAbstractList(this IQueryable<Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal()
                {
                Reader = sel.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)sel.ReaderId }
,                DateClose = sel.DateClose
,                DateTime = sel.DateTime
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal FirstOrDefaultRefOnlyIgnoreAbstract(this IQueryable<Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                ReaderId = sel.Reader == null ? (long?)null : sel.Reader.Id
,                sel.DateClose
,                sel.DateTime
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Binds.PowerSupplyBindDeviceJournal()
                {
                Reader = select.ReaderId == null? null : new Utis.Minex.ProductionModel.Devices.Reader { Id = (long)select.ReaderId }
,                DateClose = select.DateClose
,                DateTime = select.DateTime
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> ToRefOnlyList(this IQueryable<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.DateIn
,                sel.DateOut
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId }
,                DateIn = sel.DateIn
,                DateOut = sel.DateOut
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }




        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision FirstOrDefaultRefOnly(this IQueryable<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id
,                sel.DateIn
,                sel.DateOut
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId }
,                DateIn = select.DateIn
,                DateOut = select.DateOut
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }






        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static List<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> ToRefOnlyWithNamesList(this IQueryable<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.DateIn
,                sel.DateOut
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).ToList()
                .Select( sel => new Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision()
                {
                Person = sel.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)sel.PersonId, Name = (string)sel.PersonName }
,                Transport = sel.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)sel.TransportId, Name = (string)sel.TransportName }
,                Division = sel.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)sel.DivisionId, Name = (string)sel.DivisionName }
,                DateIn = sel.DateIn
,                DateOut = sel.DateOut
,                VersionObject = sel.VersionObject
,                Id = sel.Id
,                Deleted = sel.Deleted
,                Created = sel.Created
,                Updated = sel.Updated

                }
                ).ToList();

                return select;
        }







        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision FirstOrDefaultRefOnlyWithNames(this IQueryable<Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision> source)
        {
            //не менять код руками, ни строчки, НИКОГДА
            var select = source
                .Select( sel => new
                {
                PersonId = sel.Person == null ? (long?)null : sel.Person.Id,
                PersonName = sel.Person == null ? (string)null : sel.Person.Name
,                TransportId = sel.Transport == null ? (long?)null : sel.Transport.Id,
                TransportName = sel.Transport == null ? (string)null : sel.Transport.Name
,                DivisionId = sel.Division == null ? (long?)null : sel.Division.Id,
                DivisionName = sel.Division == null ? (string)null : sel.Division.Name
,                sel.DateIn
,                sel.DateOut
,                sel.VersionObject
,                sel.Id
,                sel.Deleted
,                sel.Created
,                sel.Updated

                }
                ).FirstOrDefault();

                if(select == null)
                {
                    return default;
                }
                else
                {
                    return new Utis.Minex.ProductionModel.Binds.TransportBindPersonDivision()
                {
                Person = select.PersonId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Person { Id = (long)select.PersonId, Name = (string)select.PersonName }
,                Transport = select.TransportId == null? null : new Utis.Minex.ProductionModel.Catalog.Transport { Id = (long)select.TransportId, Name = (string)select.TransportName }
,                Division = select.DivisionId == null? null : new Utis.Minex.ProductionModel.Catalog.Organize.Division { Id = (long)select.DivisionId, Name = (string)select.DivisionName }
,                DateIn = select.DateIn
,                DateOut = select.DateOut
,                VersionObject = select.VersionObject
,                Id = select.Id
,                Deleted = select.Deleted
,                Created = select.Created
,                Updated = select.Updated

                    };
                }
        }





    }
}
